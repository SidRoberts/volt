<?php

# vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */

#line 38 "parser.php.lemon"

#include "parser.php.inc.h"

/* Change next line to "#if 1"
 * to enable parser tracing. */
#if 0
# ifdef NDEBUG
#  undef NDEBUG
# endif
#else
# ifndef NDEBUG
#  define NDEBUG 1
# endif
#endif
#line 25 "parser.php.php"

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/

use Phalcon\Volt\Compiler;
use Phalcon\Volt\Scanner\State;
use Phalcon\Volt\Scanner\Token;

class phvolt_yyStackEntry
{
    public int $stateno;       /* The state-number */
    public int $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    /**
     * The user-supplied minor token value.
     * This is the value of the token.
     */
    public mixed $minor = null;
}

/* The state of the parser is completely contained in an instance of
** the following structure */

class phvolt_Parser
{
    public \Phalcon\Volt\Parser\Status $status;

    protected array $output = [];

    public function __construct(\Phalcon\Volt\Parser\Status $status)
    {
        $this->status = $status;
    }

    public function getOutput(): array
    {
        return $this->output;
    }

    var /* int */
        $yyidx = -1;                    /* Index of top element in stack */
    var /* int */
        $yyerrcnt;                 /* Shifts left before out of the error */
    // phvolt_ARG_SDECL                /* A place to hold %extra_argument */
    var $yystack = array(/* of YYSTACKDEPTH elements */
    );  /* The parser's stack */

    var $yyTraceFILE = null;
    var $yyTracePrompt = null;

    /* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    phvolt_TOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is phvolt_TOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    phvolt_ARG_SDECL     A static variable declaration for the %extra_argument
**    phvolt_ARG_PDECL     A parameter declaration for the %extra_argument
**    phvolt_ARG_STORE     Code to store %extra_argument into yypParser
**    phvolt_ARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
    const YYNOCODE = 131;
#define phvolt_TOKENTYPE phvolt_parser_token*
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 365;
    const YYNRULE = 158;
    const YYERRORSYMBOL = 89;

    /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
    var $YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    var $YY_ERROR_ACTION = self::YYNSTATE + self::YYNRULE;

    /* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
    static $yy_action = array(
        /*     0 */
        67, 322, 56, 52, 53, 65, 42, 57, 41, 60,
        /*    10 */
        61, 62, 63, 58, 59, 44, 43, 51, 49, 47,
        /*    20 */
        54, 37, 55, 190, 273, 274, 33, 64, 223, 8,
        /*    30 */
        190, 273, 274, 33, 64, 345, 44, 43, 51, 49,
        /*    40 */
        47, 54, 37, 55, 190, 273, 274, 33, 64, 186,
        /*    50 */
        357, 344, 183, 324, 175, 67, 96, 56, 52, 53,
        /*    60 */
        65, 42, 57, 41, 60, 61, 62, 63, 58, 59,
        /*    70 */
        44, 43, 51, 49, 47, 54, 37, 55, 190, 273,
        /*    80 */
        274, 33, 64, 92, 3, 67, 319, 56, 52, 53,
        /*    90 */
        65, 42, 57, 41, 60, 61, 62, 63, 58, 59,
        /*   100 */
        44, 43, 51, 49, 47, 54, 37, 55, 190, 273,
        /*   110 */
        274, 33, 64, 67, 334, 56, 52, 53, 65, 42,
        /*   120 */
        57, 41, 60, 61, 62, 63, 58, 59, 44, 43,
        /*   130 */
        51, 49, 47, 54, 37, 55, 190, 273, 274, 33,
        /*   140 */
        64, 94, 14, 49, 47, 54, 37, 55, 190, 273,
        /*   150 */
        274, 33, 64, 235, 89, 320, 175, 350, 67, 75,
        /*   160 */
        56, 52, 53, 65, 42, 57, 41, 60, 61, 62,
        /*   170 */
        63, 58, 59, 44, 43, 51, 49, 47, 54, 37,
        /*   180 */
        55, 190, 273, 274, 33, 64, 67, 1, 56, 52,
        /*   190 */
        53, 65, 42, 57, 41, 60, 61, 62, 63, 58,
        /*   200 */
        59, 44, 43, 51, 49, 47, 54, 37, 55, 190,
        /*   210 */
        273, 274, 33, 64, 67, 271, 56, 52, 53, 65,
        /*   220 */
        42, 57, 41, 60, 61, 62, 63, 58, 59, 44,
        /*   230 */
        43, 51, 49, 47, 54, 37, 55, 190, 273, 274,
        /*   240 */
        33, 64, 37, 55, 190, 273, 274, 33, 64, 351,
        /*   250 */
        352, 353, 354, 355, 356, 217, 221, 195, 193, 323,
        /*   260 */
        232, 275, 349, 269, 2, 67, 68, 56, 52, 53,
        /*   270 */
        65, 42, 57, 41, 60, 61, 62, 63, 58, 59,
        /*   280 */
        44, 43, 51, 49, 47, 54, 37, 55, 190, 273,
        /*   290 */
        274, 33, 64, 67, 295, 56, 52, 53, 65, 42,
        /*   300 */
        57, 41, 60, 61, 62, 63, 58, 59, 44, 43,
        /*   310 */
        51, 49, 47, 54, 37, 55, 190, 273, 274, 33,
        /*   320 */
        64, 121, 299, 66, 297, 232, 122, 503, 181, 297,
        /*   330 */
        270, 71, 122, 282, 294, 179, 298, 281, 282, 205,
        /*   340 */
        296, 180, 276, 281, 282, 296, 67, 182, 56, 52,
        /*   350 */
        53, 65, 42, 57, 41, 60, 61, 62, 63, 58,
        /*   360 */
        59, 44, 43, 51, 49, 47, 54, 37, 55, 190,
        /*   370 */
        273, 274, 33, 64, 67, 4, 56, 52, 53, 65,
        /*   380 */
        42, 57, 41, 60, 61, 62, 63, 58, 59, 44,
        /*   390 */
        43, 51, 49, 47, 54, 37, 55, 190, 273, 274,
        /*   400 */
        33, 64, 67, 317, 56, 52, 53, 65, 42, 57,
        /*   410 */
        41, 60, 61, 62, 63, 58, 59, 44, 43, 51,
        /*   420 */
        49, 47, 54, 37, 55, 190, 273, 274, 33, 64,
        /*   430 */
        121, 72, 39, 157, 108, 99, 122, 184, 121, 504,
        /*   440 */
        314, 315, 282, 294, 194, 282, 282, 290, 282, 321,
        /*   450 */
        282, 292, 316, 67, 318, 56, 52, 53, 65, 42,
        /*   460 */
        57, 41, 60, 61, 62, 63, 58, 59, 44, 43,
        /*   470 */
        51, 49, 47, 54, 37, 55, 190, 273, 274, 33,
        /*   480 */
        64, 67, 291, 56, 52, 53, 65, 42, 57, 41,
        /*   490 */
        60, 61, 62, 63, 58, 59, 44, 43, 51, 49,
        /*   500 */
        47, 54, 37, 55, 190, 273, 274, 33, 64, 204,
        /*   510 */
        333, 95, 67, 330, 56, 52, 53, 65, 42, 57,
        /*   520 */
        41, 60, 61, 62, 63, 58, 59, 44, 43, 51,
        /*   530 */
        49, 47, 54, 37, 55, 190, 273, 274, 33, 64,
        /*   540 */
        67, 335, 56, 52, 53, 65, 42, 57, 41, 60,
        /*   550 */
        61, 62, 63, 58, 59, 44, 43, 51, 49, 47,
        /*   560 */
        54, 37, 55, 190, 273, 274, 33, 64, 67, 336,
        /*   570 */
        56, 52, 53, 65, 42, 57, 41, 60, 61, 62,
        /*   580 */
        63, 58, 59, 44, 43, 51, 49, 47, 54, 37,
        /*   590 */
        55, 190, 273, 274, 33, 64, 67, 337, 56, 52,
        /*   600 */
        53, 65, 42, 57, 41, 60, 61, 62, 63, 58,
        /*   610 */
        59, 44, 43, 51, 49, 47, 54, 37, 55, 190,
        /*   620 */
        273, 274, 33, 64, 67, 13, 56, 52, 53, 65,
        /*   630 */
        42, 57, 41, 60, 61, 62, 63, 58, 59, 44,
        /*   640 */
        43, 51, 49, 47, 54, 37, 55, 190, 273, 274,
        /*   650 */
        33, 64, 67, 15, 56, 52, 53, 65, 42, 57,
        /*   660 */
        41, 60, 61, 62, 63, 58, 59, 44, 43, 51,
        /*   670 */
        49, 47, 54, 37, 55, 190, 273, 274, 33, 64,
        /*   680 */
        67, 210, 56, 52, 53, 65, 42, 57, 41, 60,
        /*   690 */
        61, 62, 63, 58, 59, 44, 43, 51, 49, 47,
        /*   700 */
        54, 37, 55, 190, 273, 274, 36, 64, 524, 245,
        /*   710 */
        16, 341, 247, 248, 249, 250, 251, 252, 253, 254,
        /*   720 */
        255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
        /*   730 */
        265, 266, 267, 268, 56, 52, 53, 65, 42, 57,
        /*   740 */
        41, 60, 61, 62, 63, 58, 59, 44, 43, 51,
        /*   750 */
        49, 47, 54, 37, 55, 190, 273, 274, 33, 64,
        /*   760 */
        52, 53, 65, 42, 57, 41, 60, 61, 62, 63,
        /*   770 */
        58, 59, 44, 43, 51, 49, 47, 54, 37, 55,
        /*   780 */
        190, 273, 274, 33, 64, 17, 341, 247, 248, 249,
        /*   790 */
        250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        /*   800 */
        260, 261, 262, 263, 264, 265, 266, 267, 268, 18,
        /*   810 */
        341, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        /*   820 */
        256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        /*   830 */
        266, 267, 268, 19, 341, 247, 248, 249, 250, 251,
        /*   840 */
        252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
        /*   850 */
        262, 263, 264, 265, 266, 267, 268, 20, 341, 247,
        /*   860 */
        248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
        /*   870 */
        258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
        /*   880 */
        268, 21, 341, 247, 248, 249, 250, 251, 252, 253,
        /*   890 */
        254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
        /*   900 */
        264, 265, 266, 267, 268, 22, 341, 247, 248, 249,
        /*   910 */
        250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        /*   920 */
        260, 261, 262, 263, 264, 265, 266, 267, 268, 23,
        /*   930 */
        341, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        /*   940 */
        256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        /*   950 */
        266, 267, 268, 24, 341, 247, 248, 249, 250, 251,
        /*   960 */
        252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
        /*   970 */
        262, 263, 264, 265, 266, 267, 268, 26, 341, 247,
        /*   980 */
        248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
        /*   990 */
        258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
        /*  1000 */
        268, 27, 341, 247, 248, 249, 250, 251, 252, 253,
        /*  1010 */
        254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
        /*  1020 */
        264, 265, 266, 267, 268, 28, 341, 247, 248, 249,
        /*  1030 */
        250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        /*  1040 */
        260, 261, 262, 263, 264, 265, 266, 267, 268, 29,
        /*  1050 */
        341, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        /*  1060 */
        256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        /*  1070 */
        266, 267, 268, 30, 341, 247, 248, 249, 250, 251,
        /*  1080 */
        252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
        /*  1090 */
        262, 263, 264, 265, 266, 267, 268, 31, 341, 247,
        /*  1100 */
        248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
        /*  1110 */
        258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
        /*  1120 */
        268, 32, 341, 247, 248, 249, 250, 251, 252, 253,
        /*  1130 */
        254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
        /*  1140 */
        264, 265, 266, 267, 268, 246, 247, 248, 249, 250,
        /*  1150 */
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        /*  1160 */
        261, 262, 263, 264, 265, 266, 267, 268, 214, 247,
        /*  1170 */
        248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
        /*  1180 */
        258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
        /*  1190 */
        268, 45, 327, 187, 188, 46, 198, 199, 158, 5,
        /*  1200 */
        76, 165, 77, 202, 40, 166, 106, 107, 38, 174,
        /*  1210 */
        282, 203, 325, 282, 6, 170, 326, 282, 282, 282,
        /*  1220 */
        84, 282, 7, 328, 209, 329, 85, 282, 213, 25,
        /*  1230 */
        87, 88, 331, 90, 91, 185, 155, 219, 220, 65,
        /*  1240 */
        42, 57, 41, 60, 61, 62, 63, 58, 59, 44,
        /*  1250 */
        43, 51, 49, 47, 54, 37, 55, 190, 273, 274,
        /*  1260 */
        33, 64, 136, 45, 327, 240, 241, 46, 198, 199,
        /*  1270 */
        173, 154, 76, 150, 77, 202, 40, 171, 148, 167,
        /*  1280 */
        215, 134, 282, 203, 216, 38, 9, 135, 39, 282,
        /*  1290 */
        338, 282, 84, 282, 280, 339, 209, 86, 85, 282,
        /*  1300 */
        213, 172, 87, 88, 228, 90, 91, 185, 340, 219,
        /*  1310 */
        220, 229, 10, 282, 332, 45, 327, 189, 176, 46,
        /*  1320 */
        198, 199, 342, 86, 76, 133, 77, 202, 40, 11,
        /*  1330 */
        282, 343, 86, 278, 86, 203, 137, 347, 207, 86,
        /*  1340 */
        332, 139, 346, 140, 84, 141, 227, 142, 209, 332,
        /*  1350 */
        85, 332, 213, 12, 87, 88, 332, 90, 91, 185,
        /*  1360 */
        348, 219, 220, 98, 42, 57, 41, 60, 61, 62,
        /*  1370 */
        63, 58, 59, 44, 43, 51, 49, 47, 54, 37,
        /*  1380 */
        55, 190, 273, 274, 33, 64, 86, 45, 327, 132,
        /*  1390 */
        358, 46, 198, 199, 359, 200, 76, 86, 77, 202,
        /*  1400 */
        40, 282, 86, 332, 86, 102, 86, 203, 86, 236,
        /*  1410 */
        143, 360, 144, 93, 332, 361, 84, 362, 363, 332,
        /*  1420 */
        209, 332, 85, 332, 213, 332, 87, 88, 145, 90,
        /*  1430 */
        91, 185, 146, 219, 220, 243, 242, 290, 364, 45,
        /*  1440 */
        327, 83, 290, 46, 198, 199, 244, 101, 76, 201,
        /*  1450 */
        77, 202, 40, 290, 147, 230, 290, 156, 290, 203,
        /*  1460 */
        290, 290, 78, 79, 80, 81, 82, 290, 84, 282,
        /*  1470 */
        290, 86, 209, 86, 85, 149, 213, 290, 87, 88,
        /*  1480 */
        151, 90, 91, 185, 152, 219, 220, 290, 332, 86,
        /*  1490 */
        332, 45, 327, 86, 290, 46, 198, 199, 290, 153,
        /*  1500 */
        76, 290, 77, 202, 40, 159, 332, 290, 290, 160,
        /*  1510 */
        332, 203, 290, 206, 290, 86, 290, 282, 290, 290,
        /*  1520 */
        84, 282, 290, 290, 209, 290, 85, 290, 213, 290,
        /*  1530 */
        87, 88, 332, 90, 91, 185, 86, 219, 220, 161,
        /*  1540 */
        290, 86, 290, 45, 327, 86, 290, 46, 198, 199,
        /*  1550 */
        290, 282, 76, 332, 77, 202, 40, 162, 332, 290,
        /*  1560 */
        86, 290, 332, 203, 290, 290, 290, 163, 290, 282,
        /*  1570 */
        290, 290, 84, 208, 290, 290, 209, 332, 85, 282,
        /*  1580 */
        213, 164, 87, 88, 290, 90, 91, 185, 290, 219,
        /*  1590 */
        220, 272, 290, 282, 290, 45, 327, 138, 177, 46,
        /*  1600 */
        198, 199, 109, 282, 76, 131, 77, 202, 40, 282,
        /*  1610 */
        282, 290, 290, 178, 282, 203, 290, 282, 290, 110,
        /*  1620 */
        290, 123, 290, 290, 84, 282, 290, 290, 209, 211,
        /*  1630 */
        85, 282, 213, 282, 87, 88, 290, 90, 91, 185,
        /*  1640 */
        290, 219, 220, 124, 290, 168, 290, 45, 327, 169,
        /*  1650 */
        103, 46, 198, 199, 111, 282, 76, 282, 77, 202,
        /*  1660 */
        40, 282, 282, 290, 290, 112, 282, 203, 290, 125,
        /*  1670 */
        290, 290, 290, 126, 290, 290, 84, 282, 290, 290,
        /*  1680 */
        209, 282, 85, 212, 213, 282, 87, 88, 290, 90,
        /*  1690 */
        91, 185, 290, 219, 220, 127, 290, 128, 290, 45,
        /*  1700 */
        327, 290, 129, 46, 198, 199, 113, 282, 76, 282,
        /*  1710 */
        77, 202, 40, 130, 282, 97, 290, 114, 282, 203,
        /*  1720 */
        290, 115, 290, 104, 290, 282, 290, 282, 84, 282,
        /*  1730 */
        290, 290, 209, 282, 85, 282, 213, 290, 87, 88,
        /*  1740 */
        290, 90, 91, 185, 218, 219, 220, 116, 290, 117,
        /*  1750 */
        290, 45, 327, 290, 118, 46, 198, 199, 119, 282,
        /*  1760 */
        76, 282, 77, 202, 40, 105, 282, 120, 290, 290,
        /*  1770 */
        282, 203, 290, 290, 290, 290, 290, 282, 290, 282,
        /*  1780 */
        84, 290, 290, 290, 209, 290, 85, 290, 213, 290,
        /*  1790 */
        87, 88, 290, 90, 91, 185, 222, 219, 220, 290,
        /*  1800 */
        290, 290, 290, 45, 327, 290, 290, 46, 198, 199,
        /*  1810 */
        290, 290, 76, 290, 77, 202, 40, 290, 290, 290,
        /*  1820 */
        290, 290, 290, 203, 290, 290, 290, 290, 290, 290,
        /*  1830 */
        290, 290, 84, 290, 290, 290, 209, 290, 85, 224,
        /*  1840 */
        213, 290, 87, 88, 290, 90, 91, 185, 290, 219,
        /*  1850 */
        220, 290, 290, 290, 290, 45, 327, 290, 290, 46,
        /*  1860 */
        198, 199, 290, 290, 76, 290, 77, 202, 40, 290,
        /*  1870 */
        290, 290, 290, 290, 290, 203, 290, 290, 290, 290,
        /*  1880 */
        290, 290, 290, 290, 84, 290, 290, 290, 209, 225,
        /*  1890 */
        85, 290, 213, 290, 87, 88, 290, 90, 91, 185,
        /*  1900 */
        290, 219, 220, 290, 290, 290, 290, 45, 327, 290,
        /*  1910 */
        290, 46, 198, 199, 290, 290, 76, 290, 77, 202,
        /*  1920 */
        40, 290, 290, 290, 290, 290, 290, 203, 290, 231,
        /*  1930 */
        290, 290, 290, 290, 290, 290, 84, 290, 290, 290,
        /*  1940 */
        209, 290, 85, 290, 213, 290, 87, 88, 290, 90,
        /*  1950 */
        91, 185, 290, 219, 220, 290, 290, 290, 290, 45,
        /*  1960 */
        327, 290, 290, 46, 198, 199, 290, 290, 76, 233,
        /*  1970 */
        77, 202, 40, 290, 290, 290, 290, 290, 290, 203,
        /*  1980 */
        290, 290, 290, 290, 290, 290, 290, 290, 84, 290,
        /*  1990 */
        290, 290, 209, 290, 85, 290, 213, 290, 87, 88,
        /*  2000 */
        290, 90, 91, 185, 290, 219, 220, 290, 290, 290,
        /*  2010 */
        290, 45, 327, 290, 290, 46, 198, 199, 290, 234,
        /*  2020 */
        76, 290, 77, 202, 40, 290, 290, 290, 290, 290,
        /*  2030 */
        290, 203, 290, 290, 290, 290, 290, 290, 290, 290,
        /*  2040 */
        84, 290, 290, 290, 209, 290, 85, 290, 213, 290,
        /*  2050 */
        87, 88, 290, 90, 91, 185, 290, 219, 220, 290,
        /*  2060 */
        290, 290, 290, 45, 327, 290, 290, 46, 198, 199,
        /*  2070 */
        290, 237, 76, 290, 77, 202, 40, 290, 290, 290,
        /*  2080 */
        290, 290, 290, 203, 290, 290, 290, 290, 290, 290,
        /*  2090 */
        290, 290, 84, 290, 290, 290, 209, 290, 85, 290,
        /*  2100 */
        213, 290, 87, 88, 290, 90, 91, 185, 290, 219,
        /*  2110 */
        220, 290, 290, 290, 290, 45, 327, 290, 290, 46,
        /*  2120 */
        198, 199, 290, 238, 76, 290, 77, 202, 40, 290,
        /*  2130 */
        290, 290, 290, 290, 290, 203, 290, 290, 290, 290,
        /*  2140 */
        290, 290, 290, 290, 84, 290, 290, 290, 209, 290,
        /*  2150 */
        85, 290, 213, 290, 87, 88, 290, 90, 91, 185,
        /*  2160 */
        290, 219, 220, 290, 290, 290, 290, 45, 327, 239,
        /*  2170 */
        290, 46, 198, 199, 290, 290, 76, 290, 77, 202,
        /*  2180 */
        40, 290, 290, 290, 290, 290, 290, 203, 290, 290,
        /*  2190 */
        290, 290, 290, 290, 290, 290, 84, 290, 290, 290,
        /*  2200 */
        209, 290, 85, 290, 213, 290, 87, 88, 290, 90,
        /*  2210 */
        91, 185, 290, 219, 220, 290, 290, 290, 290, 45,
        /*  2220 */
        327, 290, 290, 46, 198, 199, 290, 290, 76, 290,
        /*  2230 */
        77, 202, 40, 290, 290, 290, 290, 290, 290, 203,
        /*  2240 */
        290, 290, 290, 290, 290, 290, 290, 290, 84, 290,
        /*  2250 */
        290, 290, 209, 290, 85, 290, 213, 290, 87, 88,
        /*  2260 */
        290, 90, 91, 185, 290, 219, 220, 290, 290, 290,
        /*  2270 */
        50, 48, 290, 34, 290, 69, 290, 290, 70, 290,
        /*  2280 */
        50, 48, 290, 34, 290, 69, 290, 283, 70, 290,
        /*  2290 */
        290, 290, 290, 290, 290, 290, 290, 283, 290, 290,
        /*  2300 */
        290, 290, 290, 284, 285, 286, 287, 288, 289, 290,
        /*  2310 */
        290, 290, 290, 284, 285, 286, 287, 288, 289, 290,
        /*  2320 */
        290, 290, 290, 290, 290, 290, 290, 290, 290, 307,
        /*  2330 */
        308, 309, 310, 311, 312, 313, 35, 290, 290, 300,
        /*  2340 */
        301, 302, 303, 304, 305, 306, 35, 290, 290, 290,
        /*  2350 */
        290, 50, 48, 290, 34, 290, 69, 290, 290, 70,
        /*  2360 */
        290, 50, 48, 290, 34, 290, 69, 290, 283, 70,
        /*  2370 */
        290, 290, 290, 290, 290, 290, 290, 290, 283, 290,
        /*  2380 */
        290, 290, 293, 290, 284, 192, 286, 287, 288, 289,
        /*  2390 */
        277, 290, 290, 290, 284, 191, 286, 287, 288, 289,
        /*  2400 */
        290, 290, 290, 290, 50, 48, 290, 34, 290, 69,
        /*  2410 */
        290, 290, 70, 290, 290, 290, 290, 35, 290, 290,
        /*  2420 */
        290, 283, 290, 290, 290, 290, 290, 35, 290, 290,
        /*  2430 */
        290, 290, 100, 290, 290, 290, 290, 284, 191, 286,
        /*  2440 */
        287, 288, 289, 50, 48, 290, 34, 290, 69, 50,
        /*  2450 */
        48, 70, 34, 290, 69, 290, 290, 70, 290, 290,
        /*  2460 */
        283, 290, 290, 290, 290, 290, 197, 290, 290, 290,
        /*  2470 */
        35, 279, 290, 290, 226, 290, 284, 192, 286, 287,
        /*  2480 */
        288, 289, 196, 285, 286, 287, 288, 289, 290, 290,
        /*  2490 */
        290, 74, 290, 50, 48, 290, 34, 290, 69, 290,
        /*  2500 */
        73, 70, 290, 50, 48, 290, 34, 290, 69, 35,
        /*  2510 */
        283, 70, 290, 290, 290, 35, 50, 48, 290, 34,
        /*  2520 */
        283, 69, 290, 290, 70, 290, 284, 285, 286, 287,
        /*  2530 */
        288, 289, 290, 283, 290, 290, 284, 285, 286, 287,
        /*  2540 */
        288, 289, 290, 290, 290, 290, 290, 290, 290, 284,
        /*  2550 */
        191, 286, 287, 288, 289, 50, 48, 290, 34, 35,
        /*  2560 */
        69, 290, 290, 70, 290, 290, 290, 290, 290, 35,
        /*  2570 */
        290, 290, 283, 290, 290, 290, 290, 290, 50, 48,
        /*  2580 */
        290, 34, 35, 69, 290, 290, 70, 290, 284, 192,
        /*  2590 */
        286, 287, 288, 289, 290, 283, 290, 290, 290, 290,
        /*  2600 */
        290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
        /*  2610 */
        290, 284, 285, 286, 287, 288, 289, 290, 290, 290,
        /*  2620 */
        290, 35, 290, 290, 290, 290, 290, 290, 290, 290,
        /*  2630 */
        290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
        /*  2640 */
        290, 290, 290, 290, 35,
    );
    static $yy_lookahead = array(
        /*     0 */
        3, 38, 5, 6, 7, 8, 9, 10, 11, 12,
        /*    10 */
        13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*    20 */
        23, 24, 25, 26, 27, 28, 29, 30, 124, 32,
        /*    30 */
        26, 27, 28, 29, 30, 38, 18, 19, 20, 21,
        /*    40 */
        22, 23, 24, 25, 26, 27, 28, 29, 30, 120,
        /*    50 */
        121, 54, 117, 118, 119, 3, 2, 5, 6, 7,
        /*    60 */
        8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*    70 */
        18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
        /*    80 */
        28, 29, 30, 31, 32, 3, 32, 5, 6, 7,
        /*    90 */
        8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*   100 */
        18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
        /*   110 */
        28, 29, 30, 3, 32, 5, 6, 7, 8, 9,
        /*   120 */
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*   130 */
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
        /*   140 */
        30, 31, 32, 21, 22, 23, 24, 25, 26, 27,
        /*   150 */
        28, 29, 30, 2, 72, 118, 119, 122, 3, 8,
        /*   160 */
        5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        /*   170 */
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*   180 */
        25, 26, 27, 28, 29, 30, 3, 32, 5, 6,
        /*   190 */
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*   200 */
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
        /*   210 */
        27, 28, 29, 30, 3, 32, 5, 6, 7, 8,
        /*   220 */
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   230 */
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        /*   240 */
        29, 30, 24, 25, 26, 27, 28, 29, 30, 54,
        /*   250 */
        55, 56, 57, 58, 59, 58, 59, 126, 126, 119,
        /*   260 */
        38, 50, 121, 32, 32, 3, 4, 5, 6, 7,
        /*   270 */
        8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*   280 */
        18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
        /*   290 */
        28, 29, 30, 3, 50, 5, 6, 7, 8, 9,
        /*   300 */
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*   310 */
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
        /*   320 */
        30, 116, 50, 8, 38, 38, 116, 4, 123, 38,
        /*   330 */
        32, 4, 116, 128, 129, 125, 50, 127, 128, 52,
        /*   340 */
        54, 125, 52, 127, 128, 54, 3, 38, 5, 6,
        /*   350 */
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*   360 */
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
        /*   370 */
        27, 28, 29, 30, 3, 32, 5, 6, 7, 8,
        /*   380 */
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   390 */
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        /*   400 */
        29, 30, 3, 32, 5, 6, 7, 8, 9, 10,
        /*   410 */
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*   420 */
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        /*   430 */
        116, 4, 2, 116, 116, 4, 116, 123, 116, 4,
        /*   440 */
        32, 32, 128, 129, 126, 128, 128, 127, 128, 50,
        /*   450 */
        128, 129, 32, 3, 32, 5, 6, 7, 8, 9,
        /*   460 */
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*   470 */
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
        /*   480 */
        30, 3, 52, 5, 6, 7, 8, 9, 10, 11,
        /*   490 */
        12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*   500 */
        22, 23, 24, 25, 26, 27, 28, 29, 30, 38,
        /*   510 */
        32, 29, 3, 63, 5, 6, 7, 8, 9, 10,
        /*   520 */
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*   530 */
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        /*   540 */
        3, 32, 5, 6, 7, 8, 9, 10, 11, 12,
        /*   550 */
        13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*   560 */
        23, 24, 25, 26, 27, 28, 29, 30, 3, 32,
        /*   570 */
        5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        /*   580 */
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*   590 */
        25, 26, 27, 28, 29, 30, 3, 32, 5, 6,
        /*   600 */
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*   610 */
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
        /*   620 */
        27, 28, 29, 30, 3, 32, 5, 6, 7, 8,
        /*   630 */
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   640 */
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        /*   650 */
        29, 30, 3, 32, 5, 6, 7, 8, 9, 10,
        /*   660 */
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*   670 */
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        /*   680 */
        3, 38, 5, 6, 7, 8, 9, 10, 11, 12,
        /*   690 */
        13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*   700 */
        23, 24, 25, 26, 27, 28, 29, 30, 90, 91,
        /*   710 */
        92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
        /*   720 */
        102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        /*   730 */
        112, 113, 114, 115, 5, 6, 7, 8, 9, 10,
        /*   740 */
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*   750 */
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        /*   760 */
        6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        /*   770 */
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        /*   780 */
        26, 27, 28, 29, 30, 92, 93, 94, 95, 96,
        /*   790 */
        97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
        /*   800 */
        107, 108, 109, 110, 111, 112, 113, 114, 115, 92,
        /*   810 */
        93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
        /*   820 */
        103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*   830 */
        113, 114, 115, 92, 93, 94, 95, 96, 97, 98,
        /*   840 */
        99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
        /*   850 */
        109, 110, 111, 112, 113, 114, 115, 92, 93, 94,
        /*   860 */
        95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
        /*   870 */
        105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
        /*   880 */
        115, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        /*   890 */
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        /*   900 */
        111, 112, 113, 114, 115, 92, 93, 94, 95, 96,
        /*   910 */
        97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
        /*   920 */
        107, 108, 109, 110, 111, 112, 113, 114, 115, 92,
        /*   930 */
        93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
        /*   940 */
        103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*   950 */
        113, 114, 115, 92, 93, 94, 95, 96, 97, 98,
        /*   960 */
        99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
        /*   970 */
        109, 110, 111, 112, 113, 114, 115, 92, 93, 94,
        /*   980 */
        95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
        /*   990 */
        105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
        /*  1000 */
        115, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        /*  1010 */
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        /*  1020 */
        111, 112, 113, 114, 115, 92, 93, 94, 95, 96,
        /*  1030 */
        97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
        /*  1040 */
        107, 108, 109, 110, 111, 112, 113, 114, 115, 92,
        /*  1050 */
        93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
        /*  1060 */
        103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*  1070 */
        113, 114, 115, 92, 93, 94, 95, 96, 97, 98,
        /*  1080 */
        99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
        /*  1090 */
        109, 110, 111, 112, 113, 114, 115, 92, 93, 94,
        /*  1100 */
        95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
        /*  1110 */
        105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
        /*  1120 */
        115, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        /*  1130 */
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        /*  1140 */
        111, 112, 113, 114, 115, 93, 94, 95, 96, 97,
        /*  1150 */
        98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
        /*  1160 */
        108, 109, 110, 111, 112, 113, 114, 115, 93, 94,
        /*  1170 */
        95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
        /*  1180 */
        105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
        /*  1190 */
        115, 31, 32, 33, 34, 35, 36, 37, 116, 32,
        /*  1200 */
        40, 116, 42, 43, 44, 116, 116, 116, 2, 116,
        /*  1210 */
        128, 51, 32, 128, 32, 116, 32, 128, 128, 128,
        /*  1220 */
        60, 128, 32, 32, 64, 32, 66, 128, 68, 32,
        /*  1230 */
        70, 71, 32, 73, 74, 75, 1, 77, 78, 8,
        /*  1240 */
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1250 */
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        /*  1260 */
        29, 30, 1, 31, 32, 33, 34, 35, 36, 37,
        /*  1270 */
        116, 1, 40, 1, 42, 43, 44, 116, 1, 116,
        /*  1280 */
        1, 116, 128, 51, 69, 2, 32, 116, 2, 128,
        /*  1290 */
        32, 128, 60, 128, 88, 32, 64, 62, 66, 128,
        /*  1300 */
        68, 116, 70, 71, 1, 73, 74, 75, 32, 77,
        /*  1310 */
        78, 61, 32, 128, 79, 31, 32, 33, 116, 35,
        /*  1320 */
        36, 37, 32, 62, 40, 1, 42, 43, 44, 32,
        /*  1330 */
        128, 32, 62, 50, 62, 51, 1, 32, 52, 62,
        /*  1340 */
        79, 1, 32, 1, 60, 1, 32, 1, 64, 79,
        /*  1350 */
        66, 79, 68, 32, 70, 71, 79, 73, 74, 75,
        /*  1360 */
        32, 77, 78, 45, 9, 10, 11, 12, 13, 14,
        /*  1370 */
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  1380 */
        25, 26, 27, 28, 29, 30, 62, 31, 32, 116,
        /*  1390 */
        32, 35, 36, 37, 32, 39, 40, 62, 42, 43,
        /*  1400 */
        44, 128, 62, 79, 62, 2, 62, 51, 62, 38,
        /*  1410 */
        1, 32, 1, 8, 79, 32, 60, 32, 32, 79,
        /*  1420 */
        64, 79, 66, 79, 68, 79, 70, 71, 1, 73,
        /*  1430 */
        74, 75, 1, 77, 78, 1, 32, 130, 32, 31,
        /*  1440 */
        32, 24, 130, 35, 36, 37, 33, 30, 40, 41,
        /*  1450 */
        42, 43, 44, 130, 1, 52, 130, 116, 130, 51,
        /*  1460 */
        130, 130, 45, 46, 47, 48, 49, 130, 60, 128,
        /*  1470 */
        130, 62, 64, 62, 66, 1, 68, 130, 70, 71,
        /*  1480 */
        1, 73, 74, 75, 1, 77, 78, 130, 79, 62,
        /*  1490 */
        79, 31, 32, 62, 130, 35, 36, 37, 130, 1,
        /*  1500 */
        40, 130, 42, 43, 44, 116, 79, 130, 130, 116,
        /*  1510 */
        79, 51, 130, 53, 130, 62, 130, 128, 130, 130,
        /*  1520 */
        60, 128, 130, 130, 64, 130, 66, 130, 68, 130,
        /*  1530 */
        70, 71, 79, 73, 74, 75, 62, 77, 78, 116,
        /*  1540 */
        130, 62, 130, 31, 32, 62, 130, 35, 36, 37,
        /*  1550 */
        130, 128, 40, 79, 42, 43, 44, 116, 79, 130,
        /*  1560 */
        62, 130, 79, 51, 130, 130, 130, 116, 130, 128,
        /*  1570 */
        130, 130, 60, 61, 130, 130, 64, 79, 66, 128,
        /*  1580 */
        68, 116, 70, 71, 130, 73, 74, 75, 130, 77,
        /*  1590 */
        78, 116, 130, 128, 130, 31, 32, 116, 116, 35,
        /*  1600 */
        36, 37, 116, 128, 40, 116, 42, 43, 44, 128,
        /*  1610 */
        128, 130, 130, 116, 128, 51, 130, 128, 130, 116,
        /*  1620 */
        130, 116, 130, 130, 60, 128, 130, 130, 64, 65,
        /*  1630 */
        66, 128, 68, 128, 70, 71, 130, 73, 74, 75,
        /*  1640 */
        130, 77, 78, 116, 130, 116, 130, 31, 32, 116,
        /*  1650 */
        116, 35, 36, 37, 116, 128, 40, 128, 42, 43,
        /*  1660 */
        44, 128, 128, 130, 130, 116, 128, 51, 130, 116,
        /*  1670 */
        130, 130, 130, 116, 130, 130, 60, 128, 130, 130,
        /*  1680 */
        64, 128, 66, 67, 68, 128, 70, 71, 130, 73,
        /*  1690 */
        74, 75, 130, 77, 78, 116, 130, 116, 130, 31,
        /*  1700 */
        32, 130, 116, 35, 36, 37, 116, 128, 40, 128,
        /*  1710 */
        42, 43, 44, 116, 128, 116, 130, 116, 128, 51,
        /*  1720 */
        130, 116, 130, 116, 130, 128, 130, 128, 60, 128,
        /*  1730 */
        130, 130, 64, 128, 66, 128, 68, 130, 70, 71,
        /*  1740 */
        130, 73, 74, 75, 76, 77, 78, 116, 130, 116,
        /*  1750 */
        130, 31, 32, 130, 116, 35, 36, 37, 116, 128,
        /*  1760 */
        40, 128, 42, 43, 44, 116, 128, 116, 130, 130,
        /*  1770 */
        128, 51, 130, 130, 130, 130, 130, 128, 130, 128,
        /*  1780 */
        60, 130, 130, 130, 64, 130, 66, 130, 68, 130,
        /*  1790 */
        70, 71, 130, 73, 74, 75, 76, 77, 78, 130,
        /*  1800 */
        130, 130, 130, 31, 32, 130, 130, 35, 36, 37,
        /*  1810 */
        130, 130, 40, 130, 42, 43, 44, 130, 130, 130,
        /*  1820 */
        130, 130, 130, 51, 130, 130, 130, 130, 130, 130,
        /*  1830 */
        130, 130, 60, 130, 130, 130, 64, 130, 66, 67,
        /*  1840 */
        68, 130, 70, 71, 130, 73, 74, 75, 130, 77,
        /*  1850 */
        78, 130, 130, 130, 130, 31, 32, 130, 130, 35,
        /*  1860 */
        36, 37, 130, 130, 40, 130, 42, 43, 44, 130,
        /*  1870 */
        130, 130, 130, 130, 130, 51, 130, 130, 130, 130,
        /*  1880 */
        130, 130, 130, 130, 60, 130, 130, 130, 64, 65,
        /*  1890 */
        66, 130, 68, 130, 70, 71, 130, 73, 74, 75,
        /*  1900 */
        130, 77, 78, 130, 130, 130, 130, 31, 32, 130,
        /*  1910 */
        130, 35, 36, 37, 130, 130, 40, 130, 42, 43,
        /*  1920 */
        44, 130, 130, 130, 130, 130, 130, 51, 130, 53,
        /*  1930 */
        130, 130, 130, 130, 130, 130, 60, 130, 130, 130,
        /*  1940 */
        64, 130, 66, 130, 68, 130, 70, 71, 130, 73,
        /*  1950 */
        74, 75, 130, 77, 78, 130, 130, 130, 130, 31,
        /*  1960 */
        32, 130, 130, 35, 36, 37, 130, 130, 40, 41,
        /*  1970 */
        42, 43, 44, 130, 130, 130, 130, 130, 130, 51,
        /*  1980 */
        130, 130, 130, 130, 130, 130, 130, 130, 60, 130,
        /*  1990 */
        130, 130, 64, 130, 66, 130, 68, 130, 70, 71,
        /*  2000 */
        130, 73, 74, 75, 130, 77, 78, 130, 130, 130,
        /*  2010 */
        130, 31, 32, 130, 130, 35, 36, 37, 130, 39,
        /*  2020 */
        40, 130, 42, 43, 44, 130, 130, 130, 130, 130,
        /*  2030 */
        130, 51, 130, 130, 130, 130, 130, 130, 130, 130,
        /*  2040 */
        60, 130, 130, 130, 64, 130, 66, 130, 68, 130,
        /*  2050 */
        70, 71, 130, 73, 74, 75, 130, 77, 78, 130,
        /*  2060 */
        130, 130, 130, 31, 32, 130, 130, 35, 36, 37,
        /*  2070 */
        130, 39, 40, 130, 42, 43, 44, 130, 130, 130,
        /*  2080 */
        130, 130, 130, 51, 130, 130, 130, 130, 130, 130,
        /*  2090 */
        130, 130, 60, 130, 130, 130, 64, 130, 66, 130,
        /*  2100 */
        68, 130, 70, 71, 130, 73, 74, 75, 130, 77,
        /*  2110 */
        78, 130, 130, 130, 130, 31, 32, 130, 130, 35,
        /*  2120 */
        36, 37, 130, 39, 40, 130, 42, 43, 44, 130,
        /*  2130 */
        130, 130, 130, 130, 130, 51, 130, 130, 130, 130,
        /*  2140 */
        130, 130, 130, 130, 60, 130, 130, 130, 64, 130,
        /*  2150 */
        66, 130, 68, 130, 70, 71, 130, 73, 74, 75,
        /*  2160 */
        130, 77, 78, 130, 130, 130, 130, 31, 32, 33,
        /*  2170 */
        130, 35, 36, 37, 130, 130, 40, 130, 42, 43,
        /*  2180 */
        44, 130, 130, 130, 130, 130, 130, 51, 130, 130,
        /*  2190 */
        130, 130, 130, 130, 130, 130, 60, 130, 130, 130,
        /*  2200 */
        64, 130, 66, 130, 68, 130, 70, 71, 130, 73,
        /*  2210 */
        74, 75, 130, 77, 78, 130, 130, 130, 130, 31,
        /*  2220 */
        32, 130, 130, 35, 36, 37, 130, 130, 40, 130,
        /*  2230 */
        42, 43, 44, 130, 130, 130, 130, 130, 130, 51,
        /*  2240 */
        130, 130, 130, 130, 130, 130, 130, 130, 60, 130,
        /*  2250 */
        130, 130, 64, 130, 66, 130, 68, 130, 70, 71,
        /*  2260 */
        130, 73, 74, 75, 130, 77, 78, 130, 130, 130,
        /*  2270 */
        21, 22, 130, 24, 130, 26, 130, 130, 29, 130,
        /*  2280 */
        21, 22, 130, 24, 130, 26, 130, 38, 29, 130,
        /*  2290 */
        130, 130, 130, 130, 130, 130, 130, 38, 130, 130,
        /*  2300 */
        130, 130, 130, 54, 55, 56, 57, 58, 59, 130,
        /*  2310 */
        130, 130, 130, 54, 55, 56, 57, 58, 59, 130,
        /*  2320 */
        130, 130, 130, 130, 130, 130, 130, 130, 130, 80,
        /*  2330 */
        81, 82, 83, 84, 85, 86, 87, 130, 130, 80,
        /*  2340 */
        81, 82, 83, 84, 85, 86, 87, 130, 130, 130,
        /*  2350 */
        130, 21, 22, 130, 24, 130, 26, 130, 130, 29,
        /*  2360 */
        130, 21, 22, 130, 24, 130, 26, 130, 38, 29,
        /*  2370 */
        130, 130, 130, 130, 130, 130, 130, 130, 38, 130,
        /*  2380 */
        130, 130, 52, 130, 54, 55, 56, 57, 58, 59,
        /*  2390 */
        50, 130, 130, 130, 54, 55, 56, 57, 58, 59,
        /*  2400 */
        130, 130, 130, 130, 21, 22, 130, 24, 130, 26,
        /*  2410 */
        130, 130, 29, 130, 130, 130, 130, 87, 130, 130,
        /*  2420 */
        130, 38, 130, 130, 130, 130, 130, 87, 130, 130,
        /*  2430 */
        130, 130, 4, 130, 130, 130, 130, 54, 55, 56,
        /*  2440 */
        57, 58, 59, 21, 22, 130, 24, 130, 26, 21,
        /*  2450 */
        22, 29, 24, 130, 26, 130, 130, 29, 130, 130,
        /*  2460 */
        38, 130, 130, 130, 130, 130, 38, 130, 130, 130,
        /*  2470 */
        87, 88, 130, 130, 52, 130, 54, 55, 56, 57,
        /*  2480 */
        58, 59, 54, 55, 56, 57, 58, 59, 130, 130,
        /*  2490 */
        130, 19, 130, 21, 22, 130, 24, 130, 26, 130,
        /*  2500 */
        18, 29, 130, 21, 22, 130, 24, 130, 26, 87,
        /*  2510 */
        38, 29, 130, 130, 130, 87, 21, 22, 130, 24,
        /*  2520 */
        38, 26, 130, 130, 29, 130, 54, 55, 56, 57,
        /*  2530 */
        58, 59, 130, 38, 130, 130, 54, 55, 56, 57,
        /*  2540 */
        58, 59, 130, 130, 130, 130, 130, 130, 130, 54,
        /*  2550 */
        55, 56, 57, 58, 59, 21, 22, 130, 24, 87,
        /*  2560 */
        26, 130, 130, 29, 130, 130, 130, 130, 130, 87,
        /*  2570 */
        130, 130, 38, 130, 130, 130, 130, 130, 21, 22,
        /*  2580 */
        130, 24, 87, 26, 130, 130, 29, 130, 54, 55,
        /*  2590 */
        56, 57, 58, 59, 130, 38, 130, 130, 130, 130,
        /*  2600 */
        130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
        /*  2610 */
        130, 54, 55, 56, 57, 58, 59, 130, 130, 130,
        /*  2620 */
        130, 87, 130, 130, 130, 130, 130, 130, 130, 130,
        /*  2630 */
        130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
        /*  2640 */
        130, 130, 130, 130, 87,
    );
    const YY_SHIFT_USE_DFLT = -38;
    const YY_SHIFT_MAX = 244;
    static $yy_shift_ofst = array(
        /*     0 */
        1235, 1261, 1270, 1235, 1272, 1235, 1235, 1277, 1235, 1235,
        /*    10 */
        1235, 1235, 1235, 1235, 1235, 1235, 1235, 1324, 1335, 1340,
        /*    20 */
        1342, 1344, 1346, 1409, 1411, 1235, 1427, 1431, 1453, 1474,
        /*    30 */
        1479, 1483, 1498, 2330, 2340, 2383, 2422, 2428, 2495, 2534,
        /*    40 */
        -37, 2249, 2259, 2472, 2482, 2557, 2557, 2557, 2557, 2557,
        /*    50 */
        2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557,
        /*    60 */
        2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557,
        /*    70 */
        2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557,
        /*    80 */
        2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557,
        /*    90 */
        2557, 2557, 2557, 2557, 2557, 287, -37, -3, 195, 286,
        /*   100 */
        291, -37, 222, 52, 82, 110, 155, 183, 211, 262,
        /*   110 */
        290, 343, 371, 399, 450, 478, 509, 537, 565, 593,
        /*   120 */
        621, 649, 649, 649, 649, 649, 649, 649, 649, 649,
        /*   130 */
        677, 729, 754, 1160, 1231, 1231, 1232, 1284, 1355, 1356,
        /*   140 */
        1408, 1460, 1512, 1564, 1616, 1668, 1720, 1772, 1824, 1876,
        /*   150 */
        1928, 1980, 2032, 2084, 2136, 2188, 18, 18, 18, 18,
        /*   160 */
        18, 18, 18, 18, 18, 122, 122, 122, 122, 122,
        /*   170 */
        218, 218, 218, 218, 218, 1417, 4, 4, 4, 1283,
        /*   180 */
        1206, 430, 151, 54, 1286, 197, 1403, 231, 232, 298,
        /*   190 */
        315, 327, 427, 244, 431, 272, 323, 435, 408, 309,
        /*   200 */
        409, 420, 422, 471, 482, 1167, 1180, 1182, 1184, 643,
        /*   210 */
        1190, 1191, 1193, 1197, 1279, 1215, 1200, 1254, 1258, 1263,
        /*   220 */
        1276, 1280, 1290, 1297, 1299, 1310, 1314, 1303, 1250, 1305,
        /*   230 */
        1321, 1328, 1318, 1358, 1362, 1371, 1405, 1379, 1383, 1385,
        /*   240 */
        1386, 1404, 1434, 1413, 1406,
    );
    const YY_REDUCE_USE_DFLT = -97;
    const YY_REDUCE_MAX = 102;
    static $yy_reduce_ofst = array(
        /*     0 */
        618, 693, 717, 741, 765, 789, 813, 837, 861, 885,
        /*    10 */
        909, 933, 957, 981, 1005, 1029, 1052, 1052, 1052, 1052,
        /*    20 */
        1052, 1052, 1052, 1052, 1052, 1075, 1052, 1052, 1052, 1052,
        /*    30 */
        1052, 1052, 1052, 205, 210, 216, 314, 318, 320, 322,
        /*    40 */
        -65, 317, 1082, 1085, 1089, 1090, 1091, 1093, 1099, 1154,
        /*    50 */
        1161, 1163, 1165, 1171, 1185, 1202, 1273, 1341, 1389, 1393,
        /*    60 */
        1423, 1441, 1451, 1465, 1475, 1481, 1482, 1486, 1489, 1497,
        /*    70 */
        1503, 1505, 1527, 1529, 1533, 1534, 1538, 1549, 1553, 1557,
        /*    80 */
        1579, 1581, 1586, 1590, 1597, 1599, 1601, 1605, 1607, 1631,
        /*    90 */
        1633, 1638, 1642, 1649, 1651, -71, 37, -96, 35, 131,
        /*   100 */
        132, 140, 141,
    );
    static $yy_default = array(
        /*     0 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    10 */
        523, 523, 523, 523, 523, 523, 366, 523, 523, 523,
        /*    20 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    30 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    40 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    50 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    60 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    70 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    80 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*    90 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*   100 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*   110 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*   120 */
        523, 514, 508, 507, 515, 409, 410, 411, 412, 413,
        /*   130 */
        523, 499, 463, 523, 459, 460, 523, 523, 488, 523,
        /*   140 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*   150 */
        523, 523, 523, 523, 523, 523, 464, 480, 479, 481,
        /*   160 */
        482, 483, 484, 485, 486, 454, 456, 458, 457, 455,
        /*   170 */
        450, 451, 461, 453, 452, 523, 462, 489, 490, 523,
        /*   180 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*   190 */
        523, 518, 518, 523, 523, 523, 517, 516, 523, 523,
        /*   200 */
        523, 523, 523, 523, 523, 523, 523, 510, 523, 523,
        /*   210 */
        523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
        /*   220 */
        523, 523, 523, 523, 523, 523, 511, 523, 523, 523,
        /*   230 */
        523, 523, 421, 523, 523, 523, 523, 523, 523, 523,
        /*   240 */
        523, 523, 523, 523, 523, 365, 367, 369, 370, 371,
        /*   250 */
        372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
        /*   260 */
        382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
        /*   270 */
        393, 396, 487, 491, 492, 498, 493, 494, 495, 496,
        /*   280 */
        497, 506, 509, 516, 517, 518, 519, 520, 521, 522,
        /*   290 */
        505, 510, 512, 511, 513, 500, 503, 504, 501, 502,
        /*   300 */
        466, 468, 470, 472, 474, 476, 478, 465, 467, 469,
        /*   310 */
        471, 473, 475, 477, 397, 398, 402, 404, 405, 406,
        /*   320 */
        407, 415, 414, 416, 408, 417, 429, 431, 433, 435,
        /*   330 */
        432, 439, 449, 440, 441, 442, 443, 444, 445, 447,
        /*   340 */
        448, 368, 446, 436, 437, 438, 434, 430, 418, 419,
        /*   350 */
        422, 423, 424, 425, 426, 427, 428, 420, 403, 399,
        /*   360 */
        400, 401, 394, 392, 395,
    );

    /* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
    static $yyFallback = array();

    /*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
    function phvolt_Trace(/* stream */ $TraceFILE, string $zTracePrompt = '')
    {
        $this->yyTraceFILE = $TraceFILE;
        $this->yyTracePrompt = $zTracePrompt;
        if ($this->yyTraceFILE === null) {
            $this->yyTracePrompt = null;
        } elseif ($this->yyTracePrompt === null) {
            $this->yyTraceFILE = null;
        }
    }

    /* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
    static $yyTokenName = array(
        '$', 'OPEN_DELIMITER', 'COMMA', 'QUESTION',
        'COLON', 'RANGE', 'AND', 'OR',
        'IN', 'IS', 'EQUALS', 'NOTEQUALS',
        'LESS', 'GREATER', 'GREATEREQUAL', 'LESSEQUAL',
        'IDENTICAL', 'NOTIDENTICAL', 'DIVIDE', 'TIMES',
        'MOD', 'PLUS', 'MINUS', 'CONCAT',
        'SBRACKET_OPEN', 'PIPE', 'NOT', 'INCR',
        'DECR', 'PARENTHESES_OPEN', 'DOT', 'IF',
        'CLOSE_DELIMITER', 'ENDIF', 'ELSE', 'ELSEIF',
        'ELSEFOR', 'FOR', 'IDENTIFIER', 'ENDFOR',
        'SWITCH', 'ENDSWITCH', 'CASE', 'DEFAULT',
        'SET', 'ASSIGN', 'ADD_ASSIGN', 'SUB_ASSIGN',
        'MUL_ASSIGN', 'DIV_ASSIGN', 'SBRACKET_CLOSE', 'MACRO',
        'PARENTHESES_CLOSE', 'ENDMACRO', 'INTEGER', 'STRING',
        'DOUBLE', 'NULL', 'FALSE', 'TRUE',
        'CALL', 'ENDCALL', 'OPEN_EDELIMITER', 'CLOSE_EDELIMITER',
        'BLOCK', 'ENDBLOCK', 'CACHE', 'ENDCACHE',
        'RAW', 'ENDRAW', 'EXTENDS', 'INCLUDE',
        'WITH', 'DO', 'RETURN', 'AUTOESCAPE',
        'ENDAUTOESCAPE', 'BREAK', 'CONTINUE', 'RAW_FRAGMENT',
        'DEFINED', 'EMPTY', 'EVEN', 'ODD',
        'NUMERIC', 'SCALAR', 'ITERABLE', 'CBRACKET_OPEN',
        'CBRACKET_CLOSE', 'error', 'program', 'volt_language',
        'statement_list', 'statement', 'raw_fragment', 'if_statement',
        'elseif_statement', 'elsefor_statement', 'for_statement', 'switch_statement',
        'case_clause', 'set_statement', 'echo_statement', 'block_statement',
        'cache_statement', 'extends_statement', 'include_statement', 'do_statement',
        'return_statement', 'autoescape_statement', 'raw_statement', 'break_statement',
        'continue_statement', 'macro_statement', 'empty_statement', 'macro_call_statement',
        'expr', 'set_assignments', 'set_assignment', 'assignable_expr',
        'macro_parameters', 'macro_parameter', 'macro_parameter_default', 'argument_list',
        'cache_lifetime', 'array_list', 'slice_offset', 'array_item',
        'function_call', 'argument_item',
    );

    /* For tracing reduce actions, the names of all rules are required.
*/
    static $yyRuleName = array(
        /*   0 */
        "program ::= volt_language",
        /*   1 */
        "volt_language ::= statement_list",
        /*   2 */
        "statement_list ::= statement_list statement",
        /*   3 */
        "statement_list ::= statement",
        /*   4 */
        "statement ::= raw_fragment",
        /*   5 */
        "statement ::= if_statement",
        /*   6 */
        "statement ::= elseif_statement",
        /*   7 */
        "statement ::= elsefor_statement",
        /*   8 */
        "statement ::= for_statement",
        /*   9 */
        "statement ::= switch_statement",
        /*  10 */
        "statement ::= case_clause",
        /*  11 */
        "statement ::= set_statement",
        /*  12 */
        "statement ::= echo_statement",
        /*  13 */
        "statement ::= block_statement",
        /*  14 */
        "statement ::= cache_statement",
        /*  15 */
        "statement ::= extends_statement",
        /*  16 */
        "statement ::= include_statement",
        /*  17 */
        "statement ::= do_statement",
        /*  18 */
        "statement ::= return_statement",
        /*  19 */
        "statement ::= autoescape_statement",
        /*  20 */
        "statement ::= raw_statement",
        /*  21 */
        "statement ::= break_statement",
        /*  22 */
        "statement ::= continue_statement",
        /*  23 */
        "statement ::= macro_statement",
        /*  24 */
        "statement ::= empty_statement",
        /*  25 */
        "statement ::= macro_call_statement",
        /*  26 */
        "if_statement ::= OPEN_DELIMITER IF expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDIF CLOSE_DELIMITER",
        /*  27 */
        "if_statement ::= OPEN_DELIMITER IF expr CLOSE_DELIMITER OPEN_DELIMITER ENDIF CLOSE_DELIMITER",
        /*  28 */
        "if_statement ::= OPEN_DELIMITER IF expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ELSE CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDIF CLOSE_DELIMITER",
        /*  29 */
        "if_statement ::= OPEN_DELIMITER IF expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ELSE CLOSE_DELIMITER OPEN_DELIMITER ENDIF CLOSE_DELIMITER",
        /*  30 */
        "if_statement ::= OPEN_DELIMITER IF expr CLOSE_DELIMITER OPEN_DELIMITER ELSE CLOSE_DELIMITER OPEN_DELIMITER ENDIF CLOSE_DELIMITER",
        /*  31 */
        "elseif_statement ::= OPEN_DELIMITER ELSEIF expr CLOSE_DELIMITER",
        /*  32 */
        "elsefor_statement ::= OPEN_DELIMITER ELSEFOR CLOSE_DELIMITER",
        /*  33 */
        "for_statement ::= OPEN_DELIMITER FOR IDENTIFIER IN expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDFOR CLOSE_DELIMITER",
        /*  34 */
        "for_statement ::= OPEN_DELIMITER FOR IDENTIFIER IN expr IF expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDFOR CLOSE_DELIMITER",
        /*  35 */
        "for_statement ::= OPEN_DELIMITER FOR IDENTIFIER COMMA IDENTIFIER IN expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDFOR CLOSE_DELIMITER",
        /*  36 */
        "for_statement ::= OPEN_DELIMITER FOR IDENTIFIER COMMA IDENTIFIER IN expr IF expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDFOR CLOSE_DELIMITER",
        /*  37 */
        "switch_statement ::= OPEN_DELIMITER SWITCH expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDSWITCH CLOSE_DELIMITER",
        /*  38 */
        "switch_statement ::= OPEN_DELIMITER SWITCH expr CLOSE_DELIMITER OPEN_DELIMITER ENDSWITCH CLOSE_DELIMITER",
        /*  39 */
        "case_clause ::= OPEN_DELIMITER CASE expr CLOSE_DELIMITER",
        /*  40 */
        "case_clause ::= OPEN_DELIMITER DEFAULT CLOSE_DELIMITER",
        /*  41 */
        "set_statement ::= OPEN_DELIMITER SET set_assignments CLOSE_DELIMITER",
        /*  42 */
        "set_assignments ::= set_assignments COMMA set_assignment",
        /*  43 */
        "set_assignments ::= set_assignment",
        /*  44 */
        "set_assignment ::= assignable_expr ASSIGN expr",
        /*  45 */
        "set_assignment ::= assignable_expr ADD_ASSIGN expr",
        /*  46 */
        "set_assignment ::= assignable_expr SUB_ASSIGN expr",
        /*  47 */
        "set_assignment ::= assignable_expr MUL_ASSIGN expr",
        /*  48 */
        "set_assignment ::= assignable_expr DIV_ASSIGN expr",
        /*  49 */
        "assignable_expr ::= IDENTIFIER",
        /*  50 */
        "assignable_expr ::= assignable_expr SBRACKET_OPEN expr SBRACKET_CLOSE",
        /*  51 */
        "assignable_expr ::= assignable_expr DOT assignable_expr",
        /*  52 */
        "macro_statement ::= OPEN_DELIMITER MACRO IDENTIFIER PARENTHESES_OPEN PARENTHESES_CLOSE CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDMACRO CLOSE_DELIMITER",
        /*  53 */
        "macro_statement ::= OPEN_DELIMITER MACRO IDENTIFIER PARENTHESES_OPEN macro_parameters PARENTHESES_CLOSE CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDMACRO CLOSE_DELIMITER",
        /*  54 */
        "macro_parameters ::= macro_parameters COMMA macro_parameter",
        /*  55 */
        "macro_parameters ::= macro_parameter",
        /*  56 */
        "macro_parameter ::= IDENTIFIER",
        /*  57 */
        "macro_parameter ::= IDENTIFIER ASSIGN macro_parameter_default",
        /*  58 */
        "macro_parameter_default ::= INTEGER",
        /*  59 */
        "macro_parameter_default ::= STRING",
        /*  60 */
        "macro_parameter_default ::= DOUBLE",
        /*  61 */
        "macro_parameter_default ::= NULL",
        /*  62 */
        "macro_parameter_default ::= FALSE",
        /*  63 */
        "macro_parameter_default ::= TRUE",
        /*  64 */
        "macro_call_statement ::= OPEN_DELIMITER CALL expr PARENTHESES_OPEN argument_list PARENTHESES_CLOSE CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDCALL CLOSE_DELIMITER",
        /*  65 */
        "macro_call_statement ::= OPEN_DELIMITER CALL expr PARENTHESES_OPEN PARENTHESES_CLOSE CLOSE_DELIMITER OPEN_DELIMITER ENDCALL CLOSE_DELIMITER",
        /*  66 */
        "empty_statement ::= OPEN_DELIMITER CLOSE_DELIMITER",
        /*  67 */
        "echo_statement ::= OPEN_EDELIMITER expr CLOSE_EDELIMITER",
        /*  68 */
        "block_statement ::= OPEN_DELIMITER BLOCK IDENTIFIER CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDBLOCK CLOSE_DELIMITER",
        /*  69 */
        "block_statement ::= OPEN_DELIMITER BLOCK IDENTIFIER CLOSE_DELIMITER OPEN_DELIMITER ENDBLOCK CLOSE_DELIMITER",
        /*  70 */
        "cache_statement ::= OPEN_DELIMITER CACHE expr CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDCACHE CLOSE_DELIMITER",
        /*  71 */
        "cache_statement ::= OPEN_DELIMITER CACHE expr cache_lifetime CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDCACHE CLOSE_DELIMITER",
        /*  72 */
        "cache_lifetime ::= INTEGER",
        /*  73 */
        "cache_lifetime ::= IDENTIFIER",
        /*  74 */
        "raw_statement ::= OPEN_DELIMITER RAW CLOSE_DELIMITER statement OPEN_DELIMITER ENDRAW CLOSE_DELIMITER",
        /*  75 */
        "extends_statement ::= OPEN_DELIMITER EXTENDS expr CLOSE_DELIMITER",
        /*  76 */
        "include_statement ::= OPEN_DELIMITER INCLUDE expr CLOSE_DELIMITER",
        /*  77 */
        "include_statement ::= OPEN_DELIMITER INCLUDE expr WITH expr CLOSE_DELIMITER",
        /*  78 */
        "do_statement ::= OPEN_DELIMITER DO expr CLOSE_DELIMITER",
        /*  79 */
        "return_statement ::= OPEN_DELIMITER RETURN expr CLOSE_DELIMITER",
        /*  80 */
        "autoescape_statement ::= OPEN_DELIMITER AUTOESCAPE FALSE CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDAUTOESCAPE CLOSE_DELIMITER",
        /*  81 */
        "autoescape_statement ::= OPEN_DELIMITER AUTOESCAPE TRUE CLOSE_DELIMITER statement_list OPEN_DELIMITER ENDAUTOESCAPE CLOSE_DELIMITER",
        /*  82 */
        "break_statement ::= OPEN_DELIMITER BREAK CLOSE_DELIMITER",
        /*  83 */
        "continue_statement ::= OPEN_DELIMITER CONTINUE CLOSE_DELIMITER",
        /*  84 */
        "raw_fragment ::= RAW_FRAGMENT",
        /*  85 */
        "expr ::= MINUS expr",
        /*  86 */
        "expr ::= PLUS expr",
        /*  87 */
        "expr ::= expr MINUS expr",
        /*  88 */
        "expr ::= expr PLUS expr",
        /*  89 */
        "expr ::= expr TIMES expr",
        /*  90 */
        "expr ::= expr TIMES TIMES expr",
        /*  91 */
        "expr ::= expr DIVIDE expr",
        /*  92 */
        "expr ::= expr DIVIDE DIVIDE expr",
        /*  93 */
        "expr ::= expr MOD expr",
        /*  94 */
        "expr ::= expr AND expr",
        /*  95 */
        "expr ::= expr OR expr",
        /*  96 */
        "expr ::= expr CONCAT expr",
        /*  97 */
        "expr ::= expr PIPE expr",
        /*  98 */
        "expr ::= expr RANGE expr",
        /*  99 */
        "expr ::= expr EQUALS expr",
        /* 100 */
        "expr ::= expr NOTEQUALS DEFINED",
        /* 101 */
        "expr ::= expr IS DEFINED",
        /* 102 */
        "expr ::= expr NOTEQUALS EMPTY",
        /* 103 */
        "expr ::= expr IS EMPTY",
        /* 104 */
        "expr ::= expr NOTEQUALS EVEN",
        /* 105 */
        "expr ::= expr IS EVEN",
        /* 106 */
        "expr ::= expr NOTEQUALS ODD",
        /* 107 */
        "expr ::= expr IS ODD",
        /* 108 */
        "expr ::= expr NOTEQUALS NUMERIC",
        /* 109 */
        "expr ::= expr IS NUMERIC",
        /* 110 */
        "expr ::= expr NOTEQUALS SCALAR",
        /* 111 */
        "expr ::= expr IS SCALAR",
        /* 112 */
        "expr ::= expr NOTEQUALS ITERABLE",
        /* 113 */
        "expr ::= expr IS ITERABLE",
        /* 114 */
        "expr ::= expr IS expr",
        /* 115 */
        "expr ::= expr NOTEQUALS expr",
        /* 116 */
        "expr ::= expr IDENTICAL expr",
        /* 117 */
        "expr ::= expr NOTIDENTICAL expr",
        /* 118 */
        "expr ::= expr LESS expr",
        /* 119 */
        "expr ::= expr GREATER expr",
        /* 120 */
        "expr ::= expr GREATEREQUAL expr",
        /* 121 */
        "expr ::= expr LESSEQUAL expr",
        /* 122 */
        "expr ::= expr DOT expr",
        /* 123 */
        "expr ::= expr IN expr",
        /* 124 */
        "expr ::= expr NOT IN expr",
        /* 125 */
        "expr ::= NOT expr",
        /* 126 */
        "expr ::= expr INCR",
        /* 127 */
        "expr ::= expr DECR",
        /* 128 */
        "expr ::= PARENTHESES_OPEN expr PARENTHESES_CLOSE",
        /* 129 */
        "expr ::= SBRACKET_OPEN SBRACKET_CLOSE",
        /* 130 */
        "expr ::= SBRACKET_OPEN array_list SBRACKET_CLOSE",
        /* 131 */
        "expr ::= CBRACKET_OPEN CBRACKET_CLOSE",
        /* 132 */
        "expr ::= CBRACKET_OPEN array_list CBRACKET_CLOSE",
        /* 133 */
        "expr ::= expr SBRACKET_OPEN expr SBRACKET_CLOSE",
        /* 134 */
        "expr ::= expr QUESTION expr COLON expr",
        /* 135 */
        "expr ::= expr SBRACKET_OPEN COLON slice_offset SBRACKET_CLOSE",
        /* 136 */
        "expr ::= expr SBRACKET_OPEN slice_offset COLON SBRACKET_CLOSE",
        /* 137 */
        "expr ::= expr SBRACKET_OPEN slice_offset COLON slice_offset SBRACKET_CLOSE",
        /* 138 */
        "slice_offset ::= INTEGER",
        /* 139 */
        "slice_offset ::= IDENTIFIER",
        /* 140 */
        "array_list ::= array_list COMMA array_item",
        /* 141 */
        "array_list ::= array_item",
        /* 142 */
        "array_item ::= STRING COLON expr",
        /* 143 */
        "array_item ::= expr",
        /* 144 */
        "expr ::= function_call",
        /* 145 */
        "function_call ::= expr PARENTHESES_OPEN argument_list PARENTHESES_CLOSE",
        /* 146 */
        "function_call ::= expr PARENTHESES_OPEN PARENTHESES_CLOSE",
        /* 147 */
        "argument_list ::= argument_list COMMA argument_item",
        /* 148 */
        "argument_list ::= argument_item",
        /* 149 */
        "argument_item ::= expr",
        /* 150 */
        "argument_item ::= STRING COLON expr",
        /* 151 */
        "expr ::= IDENTIFIER",
        /* 152 */
        "expr ::= INTEGER",
        /* 153 */
        "expr ::= STRING",
        /* 154 */
        "expr ::= DOUBLE",
        /* 155 */
        "expr ::= NULL",
        /* 156 */
        "expr ::= FALSE",
        /* 157 */
        "expr ::= TRUE",
    );

    /* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
    private function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
                if (isset($yypminor->yy0)) {
                    if (($yypminor->yy0)->free_flag) {
                        unset(($yypminor->yy0)->token);
                    }
                    unset($yypminor->yy0);
                }
                break;
            case 89:
            case 90:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 91:
            case 129:
                if (isset($yypminor->yy186)) {
                    unset($yypminor->yy186);
                }
                break;
            default:
                break;   /* If no destructor action specified: do nothing */
        }
    }

    /*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
    private function yy_pop_parser_stack()
    {
        if ($this->yyidx < 0) {
            return 0;
        }

        $yytos = $this->yystack[$this->yyidx];

        if ($this->yyTraceFILE) {
            fprintf(
                $this->yyTraceFILE,
                "%sPopping %s\n",
                $this->yyTracePrompt,
                self::$yyTokenName[$yytos->major],
            );
        }

        $this->yy_destructor($yytos->major, $yytos->minor);
        unset($this->yystack[$this->yyidx]);
        $this->yyidx--;

        return $yytos->major;
    }

    /*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from phvolt_Alloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    /*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
    private function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        if ($stateno > self::YY_SHIFT_MAX || ($i = self::$yy_shift_ofst[$stateno]) == self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return $this->YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead) {
            if ($iLookAhead > 0) {
                if (
                    isset(self::$yyFallback[$iLookAhead]) &&
                    ($iFallback = self::$yyFallback[$iLookAhead]) != 0
                ) {
                    if ($this->yyTraceFILE) {
                        fprintf(
                            $this->yyTraceFILE,
                            "%sFALLBACK %s => %s\n",
                            $this->yyTracePrompt,
                            self::$yyTokenName[$iLookAhead],
                            self::$yyTokenName[$iFallback]
                        );
                    }
                    return $this->yy_find_shift_action($iFallback);
                }
            }
            return self::$yy_default[$stateno];
        }

        return self::$yy_action[$i];
    }

    /*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
    private function yy_find_reduce_action(
        $stateno,              /* Current state number */
        $iLookAhead     /* The look-ahead token */
    ) {
        if (
            $stateno > self::YY_REDUCE_MAX ||
            ($i = self::$yy_reduce_ofst[$stateno]) == self::YY_REDUCE_USE_DFLT
        ) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return $this->YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        }

        return self::$yy_action[$i];
    }

    /**
     * Perform a shift action.
     */
    private function yy_shift(
        $yyNewState,               /* The new state to shift in */
        $yyMajor,                  /* The major token to shift in */
        $yypMinor         /* Pointer ot the minor token to shift in */
    ) {
        $this->yyidx++;
        if (isset($this->yystack[$this->yyidx])) {
            $yytos = $this->yystack[$this->yyidx];
        } else {
            $yytos = new phvolt_yyStackEntry();
            $this->yystack[$this->yyidx] = $yytos;
        }

        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt, $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                $ent = $this->yystack[$i];
                fprintf($this->yyTraceFILE, " %s", self::$yyTokenName[$ent->major]);
            }
            fprintf($this->yyTraceFILE, "\n");
        }
    }

    /* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
    static $yyRuleInfo = array(
        90, 1,
        91, 1,
        92, 2,
        92, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        93, 1,
        95, 8,
        95, 7,
        95, 12,
        95, 11,
        95, 10,
        96, 4,
        97, 3,
        98, 10,
        98, 12,
        98, 12,
        98, 14,
        99, 8,
        99, 7,
        100, 4,
        100, 3,
        101, 4,
        117, 3,
        117, 1,
        118, 3,
        118, 3,
        118, 3,
        118, 3,
        118, 3,
        119, 1,
        119, 4,
        119, 3,
        113, 10,
        113, 11,
        120, 3,
        120, 1,
        121, 1,
        121, 3,
        122, 1,
        122, 1,
        122, 1,
        122, 1,
        122, 1,
        122, 1,
        115, 11,
        115, 9,
        114, 2,
        102, 3,
        103, 8,
        103, 7,
        104, 8,
        104, 9,
        124, 1,
        124, 1,
        110, 7,
        105, 4,
        106, 4,
        106, 6,
        107, 4,
        108, 4,
        109, 8,
        109, 8,
        111, 3,
        112, 3,
        94, 1,
        116, 2,
        116, 2,
        116, 3,
        116, 3,
        116, 3,
        116, 4,
        116, 3,
        116, 4,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 3,
        116, 4,
        116, 2,
        116, 2,
        116, 2,
        116, 3,
        116, 2,
        116, 3,
        116, 2,
        116, 3,
        116, 4,
        116, 5,
        116, 5,
        116, 5,
        116, 6,
        126, 1,
        126, 1,
        125, 3,
        125, 1,
        127, 3,
        127, 1,
        116, 1,
        128, 4,
        128, 3,
        123, 3,
        123, 1,
        129, 1,
        129, 3,
        116, 1,
        116, 1,
        116, 1,
        116, 1,
        116, 1,
        116, 1,
        116, 1,
    );

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     *
     * @param int $yyruleno Number of the rule by which to reduce
     */
    private function yy_reduce(int $yyruleno): void
    {
        /* The top of the parser's stack */
        $yymsp = $this->yystack[$this->yyidx];
        if ($this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
            fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt, self::$yyRuleName[$yyruleno]);
        }

        switch ($yyruleno) {
            /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
            case 0:
            case 1:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 144:
                $this->output = $yymsp->minor;
                break;
            case 2:
                phvolt_ret_zval_list(
                    $this->output,
                    $this->yystack[$this->yyidx + -1]->minor,
                    $this->yystack[$this->yyidx + 0]->minor,
                );
                break;
            case 3:
            case 43:
            case 55:
            case 141:
            case 148:
                phvolt_ret_zval_list(
                    $this->output,
                    null,
                    $this->yystack[$this->yyidx + 0]->minor,
                );
                break;
            case 26:
                phvolt_ret_if_statement(
                    $this->output,
                    $this->yystack[$this->yyidx + -5]->minor,
                    $this->yystack[$this->yyidx + -3]->minor,
                    null,
                    $this->status->getState(),
                );
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -7]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(33, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 27:
                phvolt_ret_if_statement($this->output, $this->yystack[$this->yyidx + -4]->minor, null, null, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -5]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -3]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(33, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 28:
                phvolt_ret_if_statement($this->output, $this->yystack[$this->yyidx + -9]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -11]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -10]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -8]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(34, $this->yystack[$this->yyidx + -5]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(33, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 29:
                phvolt_ret_if_statement($this->output, $this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -6]->minor, null, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -10]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -9]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -7]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -5]->minor);
                $this->yy_destructor(34, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -3]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(33, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 30:
                phvolt_ret_if_statement($this->output, $this->yystack[$this->yyidx + -7]->minor, null, null, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -9]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -8]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -5]->minor);
                $this->yy_destructor(34, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -3]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(33, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 31:
                phvolt_ret_elseif_statement($this->output, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                $this->yy_destructor(35, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 32:
                phvolt_ret_elsefor_statement($this->output, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(36, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 33:
                phvolt_ret_for_statement($this->output, $this->yystack[$this->yyidx + -7]->minor, null, $this->yystack[$this->yyidx + -5]->minor, null, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -9]->minor);
                $this->yy_destructor(37, $this->yystack[$this->yyidx + -8]->minor);
                $this->yy_destructor(8, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(39, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 34:
                phvolt_ret_for_statement($this->output, $this->yystack[$this->yyidx + -9]->minor, null, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -11]->minor);
                $this->yy_destructor(37, $this->yystack[$this->yyidx + -10]->minor);
                $this->yy_destructor(8, $this->yystack[$this->yyidx + -8]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(39, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 35:
                phvolt_ret_for_statement($this->output, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -9]->minor, $this->yystack[$this->yyidx + -5]->minor, null, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -11]->minor);
                $this->yy_destructor(37, $this->yystack[$this->yyidx + -10]->minor);
                $this->yy_destructor(2, $this->yystack[$this->yyidx + -8]->minor);
                $this->yy_destructor(8, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(39, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 36:
                phvolt_ret_for_statement($this->output, $this->yystack[$this->yyidx + -9]->minor, $this->yystack[$this->yyidx + -11]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -13]->minor);
                $this->yy_destructor(37, $this->yystack[$this->yyidx + -12]->minor);
                $this->yy_destructor(2, $this->yystack[$this->yyidx + -10]->minor);
                $this->yy_destructor(8, $this->yystack[$this->yyidx + -8]->minor);
                $this->yy_destructor(31, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(39, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 37:
                phvolt_ret_switch_statement($this->output, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                $this->yy_destructor(1, $this->yystack[$this->yyidx + -7]->minor);
                $this->yy_destructor(40, $this->yystack[$this->yyidx + -6]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(41, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 38:
#line 332 "parser.php.lemon"
                {
                    phvolt_ret_switch_statement($this->output, $this->yystack[$this->yyidx + -4]->minor, null, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(40, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(41, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1787 "parser.php.php"
                break;
            case 39:
#line 337 "parser.php.lemon"
                {
                    phvolt_ret_case_clause($this->output, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(42, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1797 "parser.php.php"
                break;
            case 40:
#line 342 "parser.php.lemon"
                {
                    phvolt_ret_case_clause($this->output, null, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(43, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1807 "parser.php.php"
                break;
            case 41:
#line 346 "parser.php.lemon"
                {
                    phvolt_ret_set_statement($this->output, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(44, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1817 "parser.php.php"
                break;
            case 42:
            case 54:
            case 140:
            case 147:
#line 350 "parser.php.lemon"
                {
                    phvolt_ret_zval_list($this->output, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);

                    $this->yy_destructor(2, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1828 "parser.php.php"
                break;
            case 44:
#line 358 "parser.php.lemon"
                {
                    phvolt_ret_set_assignment($this->output, $this->yystack[$this->yyidx + -2]->minor, Compiler::PHVOLT_T_ASSIGN, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                    $this->yy_destructor(45, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1836 "parser.php.php"
                break;
            case 45:
#line 362 "parser.php.lemon"
                {
                    phvolt_ret_set_assignment($this->output, $this->yystack[$this->yyidx + -2]->minor, Compiler::PHVOLT_T_ADD_ASSIGN, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                    $this->yy_destructor(46, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1844 "parser.php.php"
                break;
            case 46:
#line 366 "parser.php.lemon"
                {
                    phvolt_ret_set_assignment($this->output, $this->yystack[$this->yyidx + -2]->minor, Compiler::PHVOLT_T_SUB_ASSIGN, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                    $this->yy_destructor(47, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1852 "parser.php.php"
                break;
            case 47:
#line 370 "parser.php.lemon"
                {
                    phvolt_ret_set_assignment($this->output, $this->yystack[$this->yyidx + -2]->minor, Compiler::PHVOLT_T_MUL_ASSIGN, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                    $this->yy_destructor(48, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1860 "parser.php.php"
                break;
            case 48:
#line 374 "parser.php.lemon"
                {
                    phvolt_ret_set_assignment($this->output, $this->yystack[$this->yyidx + -2]->minor, Compiler::PHVOLT_T_DIV_ASSIGN, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                    $this->yy_destructor(49, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1868 "parser.php.php"
                break;
            case 49:
            case 73:
            case 139:
            case 151:
                phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_IDENTIFIER, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());

                break;
            case 50:
            case 133:
#line 382 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ARRAYACCESS, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, null, $this->status->getState());
                    $this->yy_destructor(24, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(50, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1888 "parser.php.php"
                break;
            case 51:
            case 122:
#line 386 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_DOT, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(30, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1897 "parser.php.php"
                break;
            case 52:
#line 390 "parser.php.lemon"
                {
                    phvolt_ret_macro_statement($this->output, $this->yystack[$this->yyidx + -7]->minor, null, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -9]->minor);
                    $this->yy_destructor(51, $this->yystack[$this->yyidx + -8]->minor);
                    $this->yy_destructor(29, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(52, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(53, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1912 "parser.php.php"
                break;
            case 53:
#line 394 "parser.php.lemon"
                {
                    phvolt_ret_macro_statement($this->output, $this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -10]->minor);
                    $this->yy_destructor(51, $this->yystack[$this->yyidx + -9]->minor);
                    $this->yy_destructor(29, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(52, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(53, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1927 "parser.php.php"
                break;
            case 56:
#line 406 "parser.php.lemon"
                {
                    phvolt_ret_macro_parameter($this->output, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
            }
#line 1934 "parser.php.php"
                break;
            case 57:
#line 410 "parser.php.lemon"
                {
                    phvolt_ret_macro_parameter($this->output, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                    $this->yy_destructor(45, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 1942 "parser.php.php"
                break;
            case 58:
            case 72:
            case 138:
            case 152:
#line 414 "parser.php.lemon"
                {
                    phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_INTEGER, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());

            }
#line 1952 "parser.php.php"
                break;
            case 59:
            case 153:
#line 418 "parser.php.lemon"
                {
                    phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_STRING, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());

            }
#line 1960 "parser.php.php"
                break;
            case 60:
            case 154:
                phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_DOUBLE, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                break;
            case 61:
            case 155:
#line 426 "parser.php.lemon"
                {
                    phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_NULL, null, $this->status->getState());

                    $this->yy_destructor(57, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1977 "parser.php.php"
                break;
            case 62:
            case 156:
#line 430 "parser.php.lemon"
                {
                    phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_FALSE, null, $this->status->getState());
                    $this->yy_destructor(58, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1986 "parser.php.php"
                break;
            case 63:
            case 157:
#line 434 "parser.php.lemon"
                {
                    phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_TRUE, null, $this->status->getState());

                    $this->yy_destructor(59, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 1995 "parser.php.php"
                break;
            case 64:
#line 438 "parser.php.lemon"
                {
                    phvolt_ret_macro_call_statement($this->output, $this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());

                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -10]->minor);
                    $this->yy_destructor(60, $this->yystack[$this->yyidx + -9]->minor);
                    $this->yy_destructor(29, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(52, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(61, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2010 "parser.php.php"
                break;
            case 65:
#line 442 "parser.php.lemon"
                {
                    phvolt_ret_macro_call_statement($this->output, $this->yystack[$this->yyidx + -6]->minor, null, null, $this->status->getState());

                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -8]->minor);
                    $this->yy_destructor(60, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(29, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(52, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(61, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2025 "parser.php.php"
                break;
            case 66:
#line 446 "parser.php.lemon"
                {
                    phvolt_ret_empty_statement($this->output, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2034 "parser.php.php"
                break;
            case 67:
                phvolt_ret_echo_statement($this->output, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                $this->yy_destructor(62, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(63, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 68:
#line 454 "parser.php.lemon"
                {
                    phvolt_ret_block_statement($this->output, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(64, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(65, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2056 "parser.php.php"
                break;
            case 69:
#line 458 "parser.php.lemon"
                {
                    phvolt_ret_block_statement($this->output, $this->yystack[$this->yyidx + -4]->minor, null, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(64, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(65, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2069 "parser.php.php"
                break;
            case 70:
#line 462 "parser.php.lemon"
                {
                    phvolt_ret_cache_statement($this->output, $this->yystack[$this->yyidx + -5]->minor, null, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(66, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(67, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2082 "parser.php.php"
                break;
            case 71:
#line 466 "parser.php.lemon"
                {
                    phvolt_ret_cache_statement($this->output, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -8]->minor);
                    $this->yy_destructor(66, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(67, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2095 "parser.php.php"
                break;
            case 74:
#line 478 "parser.php.lemon"
                {
                    phvolt_ret_raw_statement($this->output, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(68, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(69, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2108 "parser.php.php"
                break;
            case 75:
#line 482 "parser.php.lemon"
                {
                    phvolt_ret_extends_statement($this->output, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(70, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2118 "parser.php.php"
                break;
            case 76:
#line 486 "parser.php.lemon"
                {
                    phvolt_ret_include_statement($this->output, $this->yystack[$this->yyidx + -1]->minor, null, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(71, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2128 "parser.php.php"
                break;
            case 77:
#line 490 "parser.php.lemon"
                {
                    phvolt_ret_include_statement($this->output, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(71, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(72, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2139 "parser.php.php"
                break;
            case 78:
#line 494 "parser.php.lemon"
                {
                    phvolt_ret_do_statement($this->output, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(73, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2149 "parser.php.php"
                break;
            case 79:
#line 498 "parser.php.lemon"
                {
                    phvolt_ret_return_statement($this->output, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(74, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2159 "parser.php.php"
                break;
            case 80:
#line 502 "parser.php.lemon"
                {
                    phvolt_ret_autoescape_statement($this->output, 0, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(75, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(58, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(76, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2173 "parser.php.php"
                break;
            case 81:
#line 506 "parser.php.lemon"
                {
                    phvolt_ret_autoescape_statement($this->output, 1, $this->yystack[$this->yyidx + -3]->minor, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -7]->minor);
                    $this->yy_destructor(75, $this->yystack[$this->yyidx + -6]->minor);
                    $this->yy_destructor(59, $this->yystack[$this->yyidx + -5]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(76, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2187 "parser.php.php"
                break;
            case 82:
#line 510 "parser.php.lemon"
                {
                    phvolt_ret_break_statement($this->output, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(77, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2197 "parser.php.php"
                break;
            case 83:
#line 514 "parser.php.lemon"
                {
                    phvolt_ret_continue_statement($this->output, $this->status->getState());
                    $this->yy_destructor(1, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(78, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(32, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2207 "parser.php.php"
                break;
            case 84:
                phvolt_ret_literal_zval($this->output, Compiler::PHVOLT_T_RAW_FRAGMENT, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                break;
            case 85:
#line 522 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_MINUS, null, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(22, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2222 "parser.php.php"
                break;
            case 86:
#line 526 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_PLUS, null, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(21, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2230 "parser.php.php"
                break;
            case 87:
#line 530 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_SUB, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(22, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2238 "parser.php.php"
                break;
            case 88:
#line 534 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ADD, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(21, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2246 "parser.php.php"
                break;
            case 89:
#line 538 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_MUL, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(19, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2254 "parser.php.php"
                break;
            case 90:
#line 542 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_POW, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(19, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(19, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2263 "parser.php.php"
                break;
            case 91:
#line 546 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_DIV, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(18, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2271 "parser.php.php"
                break;
            case 92:
#line 550 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_MOD, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(18, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(18, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2280 "parser.php.php"
                break;
            case 93:
#line 554 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_MOD, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(20, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2288 "parser.php.php"
                break;
            case 94:
#line 558 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_AND, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(6, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2296 "parser.php.php"
                break;
            case 95:
#line 562 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_OR, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(7, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2304 "parser.php.php"
                break;
            case 96:
#line 566 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_CONCAT, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(23, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2312 "parser.php.php"
                break;
            case 97:
#line 570 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_PIPE, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(25, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2320 "parser.php.php"
                break;
            case 98:
#line 574 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_RANGE, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(5, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2328 "parser.php.php"
                break;
            case 99:
#line 578 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_EQUALS, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(10, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2336 "parser.php.php"
                break;
            case 100:
#line 582 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISSET, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(80, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2345 "parser.php.php"
                break;
            case 101:
#line 586 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISSET, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(80, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2354 "parser.php.php"
                break;
            case 102:
#line 590 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISEMPTY, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(81, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2363 "parser.php.php"
                break;
            case 103:
#line 594 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISEMPTY, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(81, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2372 "parser.php.php"
                break;
            case 104:
#line 598 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISEVEN, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(82, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2381 "parser.php.php"
                break;
            case 105:
#line 602 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISEVEN, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(82, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2390 "parser.php.php"
                break;
            case 106:
#line 606 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISODD, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(83, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2399 "parser.php.php"
                break;
            case 107:
#line 610 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISODD, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(83, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2408 "parser.php.php"
                break;
            case 108:
#line 614 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISNUMERIC, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(84, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2417 "parser.php.php"
                break;
            case 109:
#line 618 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISNUMERIC, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(84, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2426 "parser.php.php"
                break;
            case 110:
#line 622 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISSCALAR, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(85, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2435 "parser.php.php"
                break;
            case 111:
#line 626 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISSCALAR, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(85, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2444 "parser.php.php"
                break;
            case 112:
#line 630 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_ISITERABLE, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(86, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2453 "parser.php.php"
                break;
            case 113:
#line 634 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ISITERABLE, $this->yystack[$this->yyidx + -2]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(86, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2462 "parser.php.php"
                break;
            case 114:
#line 638 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_IS, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(9, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2470 "parser.php.php"
                break;
            case 115:
#line 642 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOTEQUALS, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(11, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2478 "parser.php.php"
                break;
            case 116:
#line 646 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_IDENTICAL, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(16, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2486 "parser.php.php"
                break;
            case 117:
#line 650 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOTIDENTICAL, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(17, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2494 "parser.php.php"
                break;
            case 118:
#line 654 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_LESS, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(12, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2502 "parser.php.php"
                break;
            case 119:
#line 658 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_GREATER, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(13, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2510 "parser.php.php"
                break;
            case 120:
#line 662 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_GREATEREQUAL, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(14, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2518 "parser.php.php"
                break;
            case 121:
#line 666 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_LESSEQUAL, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(15, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2526 "parser.php.php"
                break;
            case 123:
#line 674 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_IN, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(8, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2534 "parser.php.php"
                break;
            case 124:
#line 678 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT_IN, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(26, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(8, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2543 "parser.php.php"
                break;
            case 125:
#line 682 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_NOT, null, $this->yystack[$this->yyidx + 0]->minor, null, $this->status->getState());
                    $this->yy_destructor(26, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2551 "parser.php.php"
                break;
            case 126:
#line 686 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_INCR, $this->yystack[$this->yyidx + -1]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(27, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2559 "parser.php.php"
                break;
            case 127:
#line 690 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_DECR, $this->yystack[$this->yyidx + -1]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(28, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2567 "parser.php.php"
                break;
            case 128:
#line 694 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ENCLOSED, $this->yystack[$this->yyidx + -1]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(29, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(52, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2576 "parser.php.php"
                break;
            case 129:
#line 698 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ARRAY, null, null, null, $this->status->getState());
                    $this->yy_destructor(24, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(50, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2585 "parser.php.php"
                break;
            case 130:
#line 702 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ARRAY, $this->yystack[$this->yyidx + -1]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(24, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(50, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2594 "parser.php.php"
                break;
            case 131:
#line 706 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ARRAY, null, null, null, $this->status->getState());
                    $this->yy_destructor(87, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(88, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2603 "parser.php.php"
                break;
            case 132:
#line 710 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_ARRAY, $this->yystack[$this->yyidx + -1]->minor, null, null, $this->status->getState());
                    $this->yy_destructor(87, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(88, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2612 "parser.php.php"
                break;
            case 134:
#line 718 "parser.php.lemon"
                {
                    phvolt_ret_expr($this->output, Compiler::PHVOLT_T_TERNARY, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->status->getState());
                    $this->yy_destructor(3, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(4, $this->yystack[$this->yyidx + -1]->minor);
            }
#line 2621 "parser.php.php"
                break;
            case 135:
#line 722 "parser.php.lemon"
                {
                    phvolt_ret_slice($this->output, $this->yystack[$this->yyidx + -4]->minor, null, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(24, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(4, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(50, $this->yystack[$this->yyidx + 0]->minor);
            }
#line 2631 "parser.php.php"
                break;
            case 136:
#line 726 "parser.php.lemon"
                {
                    phvolt_ret_slice($this->output, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, null, $this->status->getState());
                    $this->yy_destructor(24, $this->yystack[$this->yyidx + -3]->minor);
                    $this->yy_destructor(4, $this->yystack[$this->yyidx + -1]->minor);
                    $this->yy_destructor(50, $this->yystack[$this->yyidx + 0]->minor);
            }
                break;
            case 137:
                {
                    phvolt_ret_slice($this->output, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());
                    $this->yy_destructor(24, $this->yystack[$this->yyidx + -4]->minor);
                    $this->yy_destructor(4, $this->yystack[$this->yyidx + -2]->minor);
                    $this->yy_destructor(50, $this->yystack[$this->yyidx + 0]->minor);
            }
                break;
            case 142:
            case 150:
                phvolt_ret_named_item($this->output, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                $this->yy_destructor(4, $this->yystack[$this->yyidx + -1]->minor);
                break;
            case 143:
            case 149:
                phvolt_ret_named_item($this->output, null, $this->yystack[$this->yyidx + 0]->minor, $this->status->getState());
                break;
            case 145:
                phvolt_ret_func_call($this->output, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->status->getState());

                $this->yy_destructor(29, $this->yystack[$this->yyidx + -2]->minor);
                $this->yy_destructor(52, $this->yystack[$this->yyidx + 0]->minor);
                break;
            case 146:
                phvolt_ret_func_call($this->output, $this->yystack[$this->yyidx + -2]->minor, null, $this->status->getState());

                $this->yy_destructor(29, $this->yystack[$this->yyidx + -1]->minor);
                $this->yy_destructor(52, $this->yystack[$this->yyidx + 0]->minor);
                break;
        }

        /* The next state */
        $yygoto = self::$yyRuleInfo[2 * $yyruleno];
        /* Amount to pop the stack */
        $yysize = self::$yyRuleInfo[2 * $yyruleno + 1];

        $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;

        $this->yyidx -= $yysize;
        /* The next action */
        $yyact = $this->yy_find_reduce_action($state_for_reduce, $yygoto);

        if ($yyact < self::YYNSTATE) {
            $this->yy_shift($yyact, $yygoto, $this->output);
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     ** The following code executes when the parse fails
     */
    private function yy_parse_failed(): void
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
  ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     */
    private function yy_syntax_error(): void
    {
        $error_str = '';
        $token_name = null;
        $tokens = \Phalcon\Volt\Tokens::$names;
        $active_token = $this->status->getState()->getActiveToken();

        if ($this->status->getState()->getStartLength()) {
            if ($active_token) {
                if (in_array($active_token, $tokens)) {
                    $token_name = array_search($active_token, $tokens);
                }
            }

            $error_str .= "Syntax error, unexpected token ";
            if (!$token_name) {
                $error_str .= "UNKNOWN";
            } else {
                $error_str .= $token_name;
            }

            if ($this->status->getToken()->getValue()) {
                $error_str .= "(" . $this->status->getToken()->getValue() . ")";
            }

            $error_str .= " in ";
            $error_str .= $this->status->getState()->getActiveFile();
            $error_str .= " on line " . $this->status->getState()->getActiveLine();
        } else {
            $error_str .= "Syntax error, unexpected EOF in " . $this->status->getState()->getActiveFile();

            /* Report unclosed 'if' blocks */
            if (($this->status->getState()->getIfLevel() + $this->status->getState()->oldIfLevel) > 0) {
                if (($this->status->getState()->getIfLevel() + $this->status->getState()->oldIfLevel) == 1) {
                    $error_str .= ", there is one 'if' block without close";
                } else {
                    $error_str .= ", there are ";
                    $error_str .= $this->status->getState()->ifLevel + $this->status->getState()->oldIfLevel;
                    $error_str .= " 'if' blocks without close";
                }
            }

            /* Report unclosed 'for' blocks */
            if ($this->status->getState()->forLevel > 0) {
                if ($this->status->getState()->forLevel == 1) {
                    $error_str .= ", there is one 'for' block without close";
                } else {
                    $error_str .= ", there are " . $this->status->getState()->ifLevel . " 'for' blocks without close";
                }
            }

            /* Report unclosed 'switch' blocks */
            if ($this->status->getState()->switchLevel > 0) {
                $error_str .= ", there is a 'switch' block without 'endswitch'";
            }
        }

        if ($error_str) {
            $this->status->setSyntaxError($error_str);
        }

        $this->status->setStatus(Compiler::PHVOLT_PARSING_FAILED);
    }

    /*
** The following is executed when the parser accepts
*/
    private function yy_accept(): void
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
  ** parser accepts */
    }

    /* The main parser program.
** The first argument is a pointer to a structure obtained from
** "phvolt_Alloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
    public function phvolt_($yymajor, $yyminor = null)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        /* (re)initialize the parser, if necessary */
        if ($this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $ent = new phvolt_yyStackEntry();
            $ent->stateno = 0;
            $ent->major = 0;
            $this->yystack = array(0 => $ent);
        }
        $yyendofinput = $yymajor === 0;

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%s Input %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yyminor);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == $this->YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%s Syntax Error!\n", $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error();
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf(
                                $this->yyTraceFILE,
                                "%sDiscard input token %s\n",
                                $this->yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yyminor);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while (
                            $this->yyidx >= 0 &&
                            $yymx != self::YYERRORSYMBOL &&
                            ($yyact = $this->yy_find_reduce_action(
                                $this->yystack[$this->yyidx]->stateno,
                                self::YYERRORSYMBOL
                            )) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor == 0) {
                            $this->yy_destructor($yymajor, $yyminor);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, 0);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {  /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error();
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yyminor);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}

function phvolt_ret_zval_list(&$ret, $list_left = null, $right_list = null): void
{
    $ret = [];

    if ($list_left !== null) {
        if (is_array($list_left) && array_key_exists(0, $list_left)) {
            foreach ($list_left as $item) {
                // Assuming the items are objects or arrays that require referencing
                $ret[] = $item;
            }
            unset($list_left);
        } else {
            $ret[] = $list_left;
        }
    }

    $ret[] = $right_list;
}

function phvolt_ret_if_statement(&$ret, $expr, $true_statements = null, $false_statements = null, ?State $state = null): void
{
    $ret = [
        "type" => Compiler::PHVOLT_T_IF,
        "expr" => $expr,
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];

    if ($true_statements !== null) {
        $ret["true_statements"] = $true_statements;
    }

    if ($false_statements !== null) {
        $ret["false_statements"] = $false_statements;
    }
}

function phvolt_ret_elseif_statement(&$ret, $expr, State $state): void
{
    $ret = [
        "type" => Compiler::PHVOLT_T_ELSEIF,
        "expr" => $expr,
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];
}

function phvolt_ret_elsefor_statement(&$ret, State $state): void
{
    $ret = [
        "type" => Compiler::PHVOLT_T_ELSEFOR,
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];
}

function phvolt_ret_for_statement(&$ret, $variable, $key = null, array $expr = [], $if_expr = null, $block_statements = null, ?State $state = null): void
{
    $ret = [
        "type" => Compiler::PHVOLT_T_FOR,
        "variable" => $variable->token,
        "expr" => $expr,
        "block_statements" => $block_statements,
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];

    // Free the variable token memory
    unset($variable->token);
    unset($variable);

    if ($key) {
        $ret["key"] = $key->token;
        // Free the key token memory
        unset($key->token);
        unset($key);
    }

    if ($if_expr !== null) {
        $ret["if_expr"] = $if_expr;
    }
}

function phvolt_ret_literal_zval(&$ret, $type, ?Token $T = null, ?State $state = null): void
{
    $ret = [
        "type" => $type,
        'value' => $T?->getValue(),
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];
}

function phvolt_ret_named_item(&$ret, $name, $expr, State $state): void
{
    $ret["expr"] = $expr;

    // Add the name if provided
    if ($name !== null) {
        $ret["name"] = substr($name->token, 0, $name->token_len);

        // Free memory for the name token
        unset($name->token);
        unset($name);
    }

    // Add file and line information from the state
    $ret["file"] = $state->getActiveFile();
    $ret["line"] = $state->getActiveLine();
}

function phvolt_ret_func_call(&$ret, $expr, $arguments, State $state): void
{
    $ret = [
        "type" => Compiler::PHVOLT_T_FCALL,
        "name" => $expr,
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];

    if ($arguments !== null) {
        $ret["arguments"] = $arguments;
    }
}

function phvolt_ret_macro_call_statement(&$ret, $expr, $arguments, $caller, State $state): void
{
    $ret = [
        "type" => Compiler::PHVOLT_T_CALL,
        "name" => $expr,
        "file" => $state->getActiveFile(),
        "line" => $state->getActiveLine(),
    ];

    if ($arguments !== null) {
        $ret["arguments"] = $arguments;
    }

    if ($caller !== null) {
        $ret["caller"] = $caller;
    }
}

function phvolt_ret_echo_statement(&$ret, $expr, State $state): void
{
    $ret = [];
    $ret["type"] = Compiler::PHVOLT_T_ECHO;
    $ret["expr"] = $expr;
    $ret["file"] = $state->getActiveFile();
    $ret["line"] = $state->getActiveLine();
}

function phvolt_ret_expr(array &$ret, int|string $type, ?array $left, ?array $right, ?array $ternary, State $state): void
{
    $ret = [
        'type' => $type,
    ];

    if ($ternary !== null) {
        $ret['ternary'] = $ternary;
    }

    if ($left !== null) {
        $ret['left'] = $left;
    }

    if ($right !== null) {
        $ret['right'] = $right;
    }

    $ret['file'] = $state->getActiveFile();
    $ret["line"] = $state->getActiveLine();
}

function phvolt_ret_include_statement(array &$ret, array $path, ?array $params, $state): void
{
    $ret = [];
    $ret['type'] = Compiler::PHVOLT_T_INCLUDE;
    $ret['path'] = $path;

    if ($params !== null) {
        $ret['params'] = $params;
    }

    $ret['file'] = $state->getActiveFile();
    $ret["line"] = $state->getActiveLine();
}

function phvolt_ret_macro_parameter(array &$ret, Token $variable, ?array $default_value, State $state): void
{
    $ret = [];
    $ret['variable'] = $variable->getValue();

    // Free the variable token memory
    unset($variable);

    if ($default_value !== null) {
        $ret['default'] = $default_value;
    }

    $ret['file'] = $state->getActiveFile();
    $ret['line'] = $state->getActiveLine();
}

function phvolt_ret_slice(array &$ret, array $left, ?array $start, ?array $end, $state): void
{
    $ret = [];
    $ret['type'] = Compiler::PHVOLT_T_SLICE;
    $ret['left'] = $left;

    if ($start !== null) {
        $ret['start'] = $start;
    }

    if ($end !== null) {
        $ret['end'] = $end;
    }

    $ret['file'] = $state->getActiveFile();
    $ret['line'] = $state->getActiveLine();
}

function phvolt_ret_switch_statement(array &$ret, array $expr, ?array $case_clauses, State $state): void
{
    $ret = [];
    $ret['type'] = Compiler::PHVOLT_T_SWITCH;
    $ret['expr'] = $expr;

    if ($case_clauses !== null) {
        $ret['case_clauses'] = $case_clauses;
    }

    $ret['file'] = $state->getActiveFile();
    $ret['line'] = $state->getActiveLine();
}

function phvolt_ret_case_clause(array &$ret, ?array $expr, State $state): void
{
    $ret = [];

    if ($expr !== null) {
        $ret['type'] = Compiler::PHVOLT_T_CASE;
        $ret['expr'] = $expr;
    } else {
        $ret['type'] = Compiler::PHVOLT_T_DEFAULT;
    }

    if (isset($state->active_file)) {
        $ret['file'] = $state->active_file;
    }

    if (isset($state->active_line)) {
        $ret['line'] = $state->active_line;
    }
}
